Linux Basic Commands 
Linux File Permissions 
Process Management Archival
Shell Basics Writing first script
Conditional statements Loops
Command line arguments File Manipulations
Basic System Administration Debugging
Scheduling processes 
At
Batch
Cron
Basic linux commands (grep/ rm/ del, ltr, etc..)
Server log checks



https://labex.io/labs/linux-your-first-linux-lab-270253?course=quick-start-with-linux&hideheader=true&hidelabby=true


-rw-rw-r-- 1 monica monica   54 Oct  5 22:07 batch_log.txt
-rwxrwxr-x 1 monica monica  156 Oct  5 21:19 bgfile.sh
-rw-rw-r-- 1 monica monica   30 Oct  5 22:07 hello.txt
drwxrwxr-x 2 monica monica 4096 Oct 10 10:17 mydir




- : its a file
d : its a dir
3 letters in series of rwx : read write execute : rights for the user (owner)
3 letters in series of rwx : read write execute : rights for the group (owner's group)
3 letters in series of rwx : read write execute : rights for others
if any right is missing it is represented by -

the User ID: Inode ID
User name
group name
Size
date 
time
filename







Vi Editor

Esc for Esc mode

:q!  quit forcefully
:wq  save and quit


delete
backspace
I insert
a append

I or a takes us to entry mode





Knowing the version of Unix
For Linux Systems:
  lsb_release -i -r 
or
For RHEL, you should use:
  cat /etc/redhat-release
Red Hat Enterprise Linux Server release 6.4 (Santiago)
Or
For Other OS like Debian & Ubuntu use:
  cat /etc/issue
Red Hat Enterprise Linux Server release 6.4 (Santiago)
  Kernel \r on an \m




The date command is used to display date, time, time zone, and more.
date
The cal command is used to display the current month's calendar with the current date highlighted.
cal
List current directory
ls
Check current path
pwd
Create a new directory under any directory
mkdir <directory name> 
The rmdir command is used to delete a directory.
rmdir <directory name> 
The cd command is used to change the current directory.
cd <directory name> 
The rm command is used to remove a file.
rm <file name>

The touch command is used to create empty files. We can create multiple empty files by executing it once.
touch <file name>  
touch <file1>  <file2> ....  
cat Command
The cat command is a multi-purpose utility in the Linux system. It can be used to create a file, display content of the file, copy the content of one file to another file, and more.
cat [OPTION]... [FILE]..  
To create a file, execute it as follows:
cat > <file name>  
// Enter file content  
Press "CTRL+ D" keys to save the file. To display the content of the file, execute it as follows:
cat <file name>  

The cp command is used to copy a file or directory.
cp <existing file name> <new file name> 
The mv command is used to move a file or a directory form one location to another location.
mv <file name> <directory path>  
The rename command is used to rename files. It is useful for renaming a large group of files.
rename 's/old-name/new-name/' files  
For example, to convert all the text files into pdf files, execute the below command:
rename 's/\.txt$/\.pdf/' *.txt 
The wc command is used to count the lines, words, and characters in a file.
wc <file name> 

The su command provides administrative access to another user. In other words, it allows access of the Linux shell to another user.
su <user name> 
The useradd command is used to add or remove a user on a Linux server.
useradd  username  
The passwd command is used to create and change the password for a user.
passwd <username> 




The head command is used to display the content of a file. It displays the first 10 lines of a file.
head <file name>  
The tail command is similar to the head command. The difference between both commands is that it displays the last ten lines of the file content. It is useful for reading the error message.
tail <file name>  
The tac command is the reverse of cat command, as its name specified. It displays the file content in reverse order (from the last line).
tac <file name>  
more command
The more command is quite similar to the cat command, as it is used to display the file content in the same way that the cat command does. The only difference between both commands is that, in case of larger files, the more command displays screenful output at a time.
In more command, the following keys are used to scroll the page:
ENTER key: To scroll down page by line.
Space bar: To move to the next page.
b key: To move to the previous page.
/ key: To search the string.
more <file name> 
The less command is similar to the more command. It also includes some extra features such as 'adjustment in width and height of the terminal.' Comparatively, the more command cuts the output in the width of the terminal.
less <file name> 


The sort command is used to sort files in alphabetical order.
sort <file name> 
The gzip command is used to truncate the file size. It is a compressing tool. It replaces the original file by the compressed file having '.gz' extension.
gzip <file1> <file2> <file3>... 
The 'comm' command is used to compare two files or streams. By default, it displays three columns, first displays non-matching items of the first file, second indicates the non-matching item of the second file, and the third column displays the matching items of both files.
comm <file1> <file2> 
The grep is the most powerful and used filter in a Linux system. The 'grep' stands for "global regular expression print." It is useful for searching the content from a file. Generally, it is used with the pipe.
command | grep <searchWord> 

The sleep command is used to hold the terminal by the specified amount of time. By default, it takes time in seconds.
sleep <time>  
The time command is used to display the time to execute a command.
time  
The mount command is used to connect an external device file system to the system's file system.
mount -t type <device> <directory> 
Linux exit command is used to exit from the current shell. It takes a parameter as a number and exits the shell with a return of status number.
exit  
After pressing the ENTER key, it will exit the terminal.
Linux clear command is used to clear the terminal screen.
clear 

Linux 'which' command locates the path of a command.
which <command1> <command2> <command3>....  
which ls pwd rmdir mkdir cp cd file man 
Linux 'type' command tell us whether a command given to the shell is a built-in or external command.
type <command>  
type pwd 



$ chmod ug=rwx,o=rx sort.c
$ chmod ugo+rx,go+w sort.c



uptime reports the current time, how long the system has been up, and three load average figures. 
The load average is a rough measure of CPU use. 
% uptime 
3:24pm up 2 days, 2:41, 16 users, load average: 1.90, 1.43, 1.33
ps without any options will display the status of the active processes you own
$ ps
PID TTY TIME CMD
7505 pts/3 00:00:00 ksh
8078 pts/3 00:00:00 ps
This output displays four pieces of information for each process. The process's ID (PID), the terminal controlling the process (TTY), how long the process has been running (TIME), and the command or program the process is running (CMD).



ps aux

STAT: PS AUX

Processes states that ps indicate are:
D Uninterruptible sleep (usually IO)
R Running or runnable (on run queue)
S Interruptible sleep (waiting for an event to complete)
T Stopped, either by a job control signal or because it is being traced.
W paging (not valid since the 2.6.xx kernel)
X dead (should never be seen)
Z Defunct ("zombie") process, terminated but not reaped by its parent.
and the additional characters are:
< high-priority (not nice to other users)
N low-priority (nice to other users)
L has pages locked into memory (for real-time and custom IO)
s is a session leader
l is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
+ is in the foreground process group 


gnome-system-monitor


Shell Scripts:

User Input:

You can take input from the keyboard:
#!/usr/bin/env bash
echo "Enter your name:"
read name
echo "Welcome, $name!"

$ sh ./bgfile.sh 
Enter your name:
Monica
Welcome, Monica!




If-Else:
#!/usr/bin/env bash
echo "Enter a number:"
read num

if [ $num -gt 10 ]; then
    echo "Number is greater than 10"
else
    echo "Number is 10 or less"
fi

$ sh bgfile.sh 
Enter a number:
5
Number is 10 or less




While Loop

#!/usr/bin/env bash
i=1
while [ $i -le 5 ]
do
    echo "Loop $i"
    i=$((i + 1))
done







For Loop

#!/usr/bin/env bash
for i in 1 2 3 4 5
do
    echo "Number: $i"
done




$(( ... )):
	This is arithmetic expansion, used to perform math operations in Bash of Ubuntu





Functions:

Reusable blocks of code:
#!/usr/bin/env bash
greet() {
    echo "Hello, $1!"
}

greet "Ubuntu User"

$1 refers to the first argument passed to the function.
$ sh bgfile.sh 
Hello, Ubuntu User!



Command-Line Arguments
#!/usr/bin/env bash
echo "Script name: $0"
echo "First argument: $1"
echo "Second argument: $2"

Run it like:
$ sh bgfile.sh mango grapes
Script name: bgfile.sh
First argument: mango
Second argument: grapes




#!/usr/bin/env bash
echo "Date: $(date)"
echo "Logged in as: $(whoami)"
echo "Uptime: $(uptime -p)"
echo "Disk usage:"
df -h | grep '^/dev/’

$ sh bgfile.sh
Date: Sun Oct  5 09:14:54 PM IST 2025
Logged in as: monica
Uptime: up 1 hour, 28 minutes
Disk usage:
/dev/sda2        59G  9.1G   47G  17% /
/dev/sr0         89M   89M     0 100% /media/monica/CDROM
/dev/sr1        5.7G  5.7G     0 100% /media/monica/Ubuntu 24.04 LTS amd64




Commands:
touch filename.txt
Creates an empty file if it doesn’t exist.
Example in Script:
#!/bin/bash
echo "Enter filename:"
read fname
touch "$fname"
echo "File '$fname' created successfully."




Commands:
cat filename.txt
Displays file contents.
more filename.txt
less filename.txt
Paginated view of large files.
Script Example:
#!/bin/bash
echo "Enter filename to read:"
read fname
if [ -f "$fname" ]; then
    cat "$fname"
else
    echo "File does not exist."
fi




Commands:
echo "Hello World" > myfile.txt
Creates or overwrites file with text.
echo "New Line" >> myfile.txt
Appends to the file.
Script Example:
#!/bin/bash
echo "Enter text to write to file:"
read text
echo "$text" >> output.txt
echo "Data written to output.txt"




Command:
cp source.txt destination.txt
Script Example:
#!/bin/bash
echo "Enter source file:"
read src
echo "Enter destination file:"
read dest
cp "$src" "$dest"
echo "File copied successfully."





Command:
mv oldname.txt newname.txt
Script Example:
#!/bin/bash
echo "Enter old filename:"
read old
echo "Enter new filename:"
read new
mv "$old" "$new"
echo "File renamed successfully."




Command:
rm filename.txt
Script Example:
#!/bin/bash
echo "Enter filename to delete:"
read fname
if [ -f "$fname" ]; then
    rm "$fname"
    echo "File deleted."
else
    echo "File not found."
fi







#!/usr/bin/env bash
# Menu-driven program for file CRUD operations

while true
do
    echo "=================================="
    echo "       FILE CRUD MENU"
    echo "=================================="
    echo "1. Create a file"
    echo "2. Read a file"
    echo "3. Update (append to) a file"
    echo "4. Delete a file"
    echo "5. Exit"
    echo -n "Enter your choice [1-5]: "
    read choice

    case $choice in
        1)
            echo -n "Enter file name to create: "
            read fname
            if [ -f "$fname" ]; then
                echo "File '$fname' already exists!"
            else
                touch "$fname"
                echo "File '$fname' created successfully."
            fi
            ;;
        2)
            echo -n "Enter file name to read: "
            read fname
            if [ -f "$fname" ]; then
                echo "---------- File Contents ----------"
                cat "$fname"
                echo "-----------------------------------"
            else
                echo "File '$fname' does not exist."
            fi
            ;;
        3)
            echo -n "Enter file name to update: "
            read fname
            if [ -f "$fname" ]; then
                echo -n "Enter text to append: "
                read text
                echo "$text" >> "$fname"
                echo "File '$fname' updated successfully."
            else
                echo "File '$fname' does not exist."
            fi
            ;;
        4)
            echo -n "Enter file name to delete: "
            read fname
            if [ -f "$fname" ]; then
                rm "$fname"
                echo "File '$fname' deleted successfully."
            else
                echo "File '$fname' does not exist."
            fi
            ;;
        5)
            echo "Exiting... Goodbye!"
            exit 0
            ;;
        *)
            echo "Invalid choice. Please try again."
            ;;
    esac

    echo ""
    sleep 1
done







Users & Groups
who           # logged-in users
id username   # user id, group id
groups user   # groups a user belongs to
Process Monitoring
ps aux        # list all running processes
top           # interactive CPU/memory usage
htop          # interactive, colored process monitor (install with `sudo apt install htop`)
pgrep firefox # find PID of process
kill PID      # terminate process
kill -9 PID   # force kill process
Zombie / Orphan Processes
Zombies: ps -eo pid,ppid,stat,cmd | grep ' Z'
Orphans: processes with PPID = 1: ps -eo pid,ppid,stat,cmd | awk '$2==1'




Disk Usage
df -h          # space used per filesystem
du -sh /path   # size of a directory
Check Inodes
df -i
Permissions & Ownership
ls -l filename       # file permissions
chmod 644 filename   # change permissions
chown user:group file.txt  # change ownership
Find Large Files
find / -type f -size +100M






Check Network Interfaces
ip a           # show interfaces and IP addresses
ifconfig       # legacy command
Check Connectivity
ping google.com
traceroute google.com
Network Ports
netstat -tulnp   # active ports and listening services
ss -tulnp        # modern alternative to netstat
Download / Test URLs
curl -I https://google.com
wget https://example.com





APT Commands
sudo apt update          # update repository info
sudo apt upgrade -y      # upgrade installed packages
sudo apt install htop    # install packages
dpkg -l | grep nginx     # check installed packages
Removing Packages
sudo apt remove package_name
sudo apt purge package_name  # remove with config files





systemctl status nginx       # check service status
systemctl start nginx        # start service
systemctl stop nginx         # stop service
systemctl restart nginx      # restart service
systemctl enable nginx       # enable at boot
systemctl disable nginx      # disable at boot
Check all active services
systemctl list-units --type=service --state=running





free -h                     # memory usage
vmstat 2 5                  # memory & CPU stats every 2 sec for 5 times
top                         # real-time CPU/memory usage
htop                        # interactive monitor
iostat -x 2                 # detailed CPU & disk I/O stats










