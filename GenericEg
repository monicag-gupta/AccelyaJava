package exercises;

class Emp<T>
{
	T empid;
	String name;
	public Emp(T id, String name) {
		empid=id; this.name=name;
	}
}



package exercises;
import java.util.function.*;

interface myPredicate<T> {
	boolean test(T o);
	default myPredicate<T> or(myPredicate<T> other){
		myPredicate<T> res=(o)-> this.test(o)||other.test(o);
		return res;
	}
	default myPredicate<T> and(myPredicate<T> other){
		myPredicate<T> res=(o)-> this.test(o)&&other.test(o);
		return res;
	}
	default myPredicate<T> negate(){
		myPredicate<T> res=(o)-> !this.test(o);
		return res;
	}
}

//void foreach(ColObj, myConsumer){
// Iterate to each obj in ColObj, get consumed by myConsumer }

public class UePredicate {

	public static void main(String[] args) {
		Consumer<String> c1=(x)->System.out.println("Consumed by c1: " + x);
		Consumer<String> c2=(x)->System.out.println("Consumed by c2: " + x);
		Consumer<String> c3=c1.andThen(c2);
		Function<Integer,Integer> f1=(x)->{System.out.println("f1 : "+x +" giving " + x*x);return x*x;};
		Function<Integer,Integer> f2=(x)->{System.out.println("f2 : "+x +" giving " + x*x*x);return x*x*x;};
		Function<Integer,Integer> f3=f1.andThen(f2);
		Function<Integer,Integer> f4=f1.compose(f2);
		System.out.println(f3.apply(2));
		System.out.println(f4.apply(2));
		c3.accept("Hello World");
	}

}







public class UePredicate {

	public static void main(String[] args) {
		Emp<Integer> e1=new Emp<>(101,"John");
		Emp<String> e2=new Emp<>("E111","Jane");

	}

}









Rushikesh Chavan 
11:57 AM (26 minutes ago)
to me

package Day8;

import java.util.Collection;

import java.util.function.Consumer;

import java.util.List;





 class Demo {

	

	public static <T> void foreach(Collection<T> colObj, Consumer<T> myConsumer) {

        for (T obj : colObj) {

            myConsumer.accept(obj);

        }

    }

}



public class ABC {

    public static void main(String[] args) {

        List<String> names = List.of("vibhuti", "rohit", "yash");



        Demo.foreach(names, name -> System.out.println("Hello,how are you " + name));

    }

}



outputs

Hello,how are you vibhuti

Hello,how are you rohit

Hello,how are you yash







Yash Dhoot
11:26 AM (59 minutes ago)
to me

package day8;

 

import java.util.function.Predicate;

 

interface MyPredicate<T> {

    boolean test(T t);

 

    default MyPredicate<T> and(MyPredicate<T> other) {

        return (t) -> this.test(t) && other.test(t);

    }

 

    default MyPredicate<T> or(MyPredicate<T> other) {

        return (t) -> this.test(t) || other.test(t);

    }

 

    default MyPredicate<T> negate() {

        return (t) -> !this.test(t);

    }

 

    static <T> MyPredicate<T> isEqual(Object targetRef) {

        return (t) -> (targetRef == null) ? t == null : targetRef.equals(t);

    }

}

 

 

public class Exercise1{

             

    public static void main(String[] args) {

        MyPredicate<Integer> isEven = (n) -> n%2==0;

        MyPredicate<Integer> isPositive = (n) -> n > 0;

 

        System.out.println(isEven.test(10));

        System.out.println(isEven.negate().test(10));

        System.out.println(isEven.and(isPositive).test(10));

        System.out.println(isEven.or(isPositive).test(-2));

        System.out.println(MyPredicate.isEqual(5).test(5));

    }

 

}

 

