https://kafka.apache.org/downloads

Download the Binary downloads:
Scala 2.12  - kafka_2.12-3.7.1.tgz (asc, sha512)

Extract it and save the folder in a location in drive





Create a Topic:
kafka-topics.sh --create --topic <topic_name> --bootstrap-server <kafka_broker> --partitions <num_partitions> --replication-factor <num_replicas>
List Topics:
kafka-topics.sh --list --bootstrap-server <kafka_broker>
Send Messages:
kafka-console-producer.sh --topic <topic_name> --bootstrap-server <kafka_broker>
Consume Messages:
kafka-console-consumer.sh --topic <topic_name> --bootstrap-server <kafka_broker> --from-beginning




Dependencies: 
  Use spring-boot-starter-kafka for integrating Kafka with Spring Boot.
Configuration: 
  Configure Kafka properties in application.properties or 
  application.yml for producer and consumer settings.
KafkaTemplate: 
  Use KafkaTemplate for producing messages to Kafka topics.
@KafkaListener: 
  Use the @KafkaListener annotation to create a Kafka consumer 
  within your Spring Boot application.
Kafka Streams
Kafka Streams: 
  A library for building real-time applications and microservices 
  that process data stored in Kafka topics. 
  It provides a simple and powerful DSL (Domain-Specific Language) 
  for stream processing.
Kafka Connect
Kafka Connect: 
  A tool for integrating Kafka with external systems, 
  such as databases, key-value stores, and file systems. 
  It simplifies the process of moving data into and out of Kafka.
Monitoring and Management
JMX Metrics: 
  Kafka exposes metrics via JMX (Java Management Extensions), 
  which can be monitored using tools like Prometheus and Grafana.
Kafka Manager: 
  A web-based tool for managing and monitoring Kafka clusters.





Zookeeper and Kafka broker

Zookeeper is a service required by Kafka to manage distributed brokers and maintain metadata. 
Kafka relies on Zookeeper for leader election and configuration management.

Example Configuration (zookeeper.properties):
dataDir=C:/kafka/zookeeper-data
clientPort=2181
dataDir: Directory where Zookeeper stores its data.
clientPort: Port on which Zookeeper listens for client connections.

Once Zookeeper is up and running, you can start the Kafka broker. 
The broker is the component that stores and manages data.
Example Configuration (server.properties):
broker.id=0
log.dirs=C:/kafka/kafka-logs
zookeeper.connect=localhost:2181
listeners=PLAINTEXT://localhost:9092
broker.id: Unique ID for the Kafka broker in the cluster.
log.dirs: Directory where Kafka stores its log files.
zookeeper.connect: Address of the Zookeeper instance.
listeners: Protocol and address on which Kafka listens for client connections.



https://kafka.apache.org/downloads

Download the Binary downloads:
Scala 2.12  - kafka_2.12-3.7.1.tgz (asc, sha512)

Extract it and save the folder in a location in drive



Start Kafka

Zookeeper: Starts first and manages Kafkaâ€™s distributed coordination.
Kafka Broker: Starts after Zookeeper and manages message storage and retrieval.

Start terminal as sudo / powershell as administrator:
> cd C:\kafka 
> .\bin\windows\zookeeper-server-start.bat .\config\zookeeper.properties
Minimize it.

Start another terminal as sudo / powershell as administrator:
> cd C:\kafka 
> .\bin\windows\kafka-server-start.bat .\config\server.properties
Minimize it




















