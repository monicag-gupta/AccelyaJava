Hibernate Properties

Properties
Description
hibernate.dialect
This property makes Hibernate generate the appropriate SQL for the chosen database.
hibernate.connection.driver_class
The JDBC driver class.
hibernate.connection.url
The JDBC URL to the database instance.
hibernate.connection.username
The database username.
hibernate.connection.password
The database password.
hibernate.connection.pool_size
Limits the number of connections waiting in the Hibernate database connection pool.
hibernate.connection.autocommit
Allows autocommit mode to be used for the JDBC connection.






Database & Dialect Property

DB2
org.hibernate.dialect.DB2Dialect
HSQLDB
org.hibernate.dialect.HSQLDialect
HypersonicSQL
org.hibernate.dialect.HSQLDialect
Informix
org.hibernate.dialect.InformixDialect
Ingres
org.hibernate.dialect.IngresDialect
Interbase
org.hibernate.dialect.InterbaseDialect
Microsoft SQL Server 2000
org.hibernate.dialect.SQLServerDialect
Microsoft SQL Server 2005
org.hibernate.dialect.SQLServer2005Dialect
Microsoft SQL Server 2008
org.hibernate.dialect.SQLServer2008Dialect
MySQL
org.hibernate.dialect.MySQLDialect
MySQL5
org.hibernate.dialect.MySQL5Dialect
Oracle (any version)
org.hibernate.dialect.OracleDialect
Oracle 11g
org.hibernate.dialect.Oracle10gDialect
Oracle 10g
org.hibernate.dialect.Oracle10gDialect
Oracle 9i
org.hibernate.dialect.Oracle9iDialect
PostgreSQL
org.hibernate.dialect.PostgreSQLDialect
Progress
org.hibernate.dialect.ProgressDialect
SAP DB
org.hibernate.dialect.SAPDBDialect
Sybase
org.hibernate.dialect.SybaseDialect
Sybase Anywhere
org.hibernate.dialect.SybaseAnywhereDialect











Configuration Object
  The Configuration object is the first Hibernate object you create in any Hibernate application and usually created only once during application initialization. 
  The Configuration object provides two keys components:
    Database Connection
      This is handled through one or more configuration files supported by Hibernate. These files are hibernate.properties and hibernate.cfg.xml.
    Class Mapping Setup
      This component creates the connection between the Java classes and database tables.




SessionFactory Object

Configuration object is used to create a SessionFactory object which in turn configures Hibernate for the application using the supplied configuration file and allows for a Session object to be instantiated. 
SessionFactory is a thread safe object and used by all the threads of an application.
The SessionFactory is heavyweight object so usually it is created during application start up and kept for later use. 
You would need one SessionFactory object per database using a separate configuration file. 
So if you are using multiple databases then you would have to create multiple SessionFactory objects.



Session Object

A Session is used to get a physical connection with a database. 
It is lightweight and designed to be instantiated each time an interaction is needed with the database. 
Persistent objects are saved and retrieved through a Session object.
The session objects should not be kept open for a long time because they are not usually thread safe and they should be created and destroyed as needed.




Transaction Object

A Transaction represents a unit of work with the database and most of the RDBMS supports transaction functionality. 
Transactions in Hibernate are handled by an underlying transaction manager and transaction (from JDBC or JTA).
This is an optional object and Hibernate applications may choose not to use this interface, instead managing transactions in their own application code.



Query Object

Query objects use SQL or Hibernate Query Language (HQL) string to retrieve data from the database and create objects. 
A Query instance is used to bind query parameters and to execute the query.








Session Interface Methods
Transaction beginTransaction()
Connection close()
Query createQuery(String queryString)
SQLQuery createSQLQuery(String queryString)
void delete(Object object)
Session get(String entityName, Serializable id)
SessionFactory getSessionFactory()
Transaction getTransaction()
Serializable save(Object object)
void update(Object object)
























