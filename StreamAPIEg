package Day3;
import java.util.*;
import java.util.function.*;

public class StreamEg {
	static void myforeach(Consumer<Integer> c, int x) {
		c.accept(x);
	}

	public static void main(String[] args) {
		ArrayList<Integer> ints = new ArrayList<>();
		ints.add(1); ints.add(2);
		ints.forEach((x)->System.out.print(x + ", "));
		
		
		System.out.println("\n");
		myforeach(System.out::println,10);

	}

}






package Day3;
import java.util.*;
import java.util.function.*;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public class StreamEg {
	public static void main(String[] args) {
		List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);
		List<Integer> oddNums=numbers.stream()
			.peek(x->System.out.print(x + " -> "))
			.map(x->x*x)
			.peek(x->System.out.print(x + " "))
			.filter(x->x%2!=0)
			.distinct()
			.sorted()
			.collect(Collectors.toList());
		
		System.out.println("\n\n" + oddNums);

	}

}






Intermediate Operations:
	Stream.filter()
	Stream.map()
	Stream.distinct()
	Stream.peek()
	Stream.sorted()
	
Terminal Operations:
	Stream.collect()
	Stream.min() / Stream.max()
	Stream.findAny().orElse()
	Stream.findFirst().orElse()
	Stream.count()









