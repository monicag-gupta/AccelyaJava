ng generate component message


Pass Input Value into Component: 
message.component.ts


import { Component, Input } from '@angular/core';  
 @Component({  
  selector: 'message-info',  
  templateUrl: './message.component.html',  
  styleUrls : ['./message.component.css']  
})  
export class MessageComponent {  
    @Input() public message :string = '';  
    @Input('alert-pop') public message1 :string= ''  
     public showAlert():void{  
        alert(this.message1);  
    }  
} 



Pass Input Value into Component: 

message.component.html

<div>  
    Message : <h2>{{message}}</h2>  
    <input type="button" value="Show Alert" (click)="showAlert()"/>  
</div> 





Pass Input Value into Component: 

app.component.ts

import { Component } from '@angular/core';  
 @Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
    public val: string = "This is alert popup message from app.component to @input metadata of message component";   
}  




Pass Input Value into Component: 

app.component.html



<h1>
  Hello
</h1>
<message-info 
[message]='"This is passed from app.component to message component"'
[alert-pop]="val"></message-info>










@Output : EventEmitter -> Emit event


Example: 

child.component.ts

import { Component, Input, Output,EventEmitter, OnInit } from '@angular/core';  

@Component({
  selector: 'app-child',
  templateUrl: './child.component.html',
  styleUrls: ['./child.component.css']
})
export class ChildComponent implements OnInit {  
   @Input() myinputMsg:string='';  
   @Output() myOutput:EventEmitter<string>= new EventEmitter();  
   outputMessage:string="I am child component."  
   constructor() { }  
   ngOnInit() {  
      console.log(this.myinputMsg);  
      alert(this.myinputMsg); 
   } 
   sendValues(){  
   	this.myOutput.emit(this.outputMessage);  
   }  
} 




Child.component.html

<p>child works!</p>
<button (click)="sendValues()"> Send Data </button> 





App.component.ts

import { Component } from '@angular/core';
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css'],
})
export class AppComponent {
GetChildData(data:string){  
   console.log(data);  
   alert(data);
}  
myInputMessage:string="My Input Message";
	}




App.component.html

<app-child [myinputMsg]="myInputMessage" (myOutput) ="GetChildData($event)"></app-child>  
<br>
  <br>
  <br>





import { Component } from '@angular/core';
@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css'],
})
export class AppComponent {
    data: string = "";
    GetChildData(data: string) {
        console.log(data);
        // alert(data);
        this.data = data;
    }
    fn() {
        alert(this.data);
    }


    myInputMessage: string = "My Input Message";
}





<app-child [myinputMsg]="myInputMessage" (myOutput) ="GetChildData($event)"></app-child>
<hr>
<button (click)="fn()">I am Parent button</button>  
<br>
  <br>
  <br>






A directive modifies the DOM by changing the appearance, behavior, or layout of DOM elements.
The main reason for using directives in any Angular applications are
Reusability
Readability
Maintainability
Types of Directives
There are three main types of directives in Angular 8+:
Component – Directives with templates.
Attribute Directives – Directives that change the behavior of a component or element but don’t affect the template.
Structural Directives – Directives that change the behavior of a component or element by affecting the template or the DOM decoration of the UI.





@Directive() metadata options:
selector – The selector property is used to identify the directive within the HTML template. Also, with the help of this property, we can initialize the directive from the DOM elements
inputs - It is used to provide the set of data-bound input properties of the directives.
outputs – It is used to enumerates any event properties from the directives.
providers – It is used to inject any provider type like service or components within the directives.
exportAs – It is used to define the name of the directives which can be used to assign a directive as a variable. 





Structural directives start with a * sign. 
These directives are used to manipulate and change the structure of the DOM elements.
*ngIf Directive: The ngIf allows us to Add/Remove DOM Element.
*ngSwitch Directive: The *ngSwitch allows us to Add/Remove DOM Element. It is similar to switch statement of Java.
*ngFor Directive: The *ngFor directive is used to repeat a portion of HTML template once per each item from an iterable list (Collection).





Attribute directives are used to change the look and behavior of the DOM elements. For example: ngClass directive, and ngStyle directive etc.
ngClass Directive: The ngClass directive is used to add or remove CSS classes to an HTML element.
ngStyle Directive: The ngStyle directive facilitates you to modify the style of an HTML element using the expression. You can also use ngStyle directive to dynamically change the style of your HTML element.






Attribute Directive:
app.component.ts

import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  showColor: boolean = false;  
  constructor() { }  
  public changeColor(): void {  
      this.showColor = !this.showColor;  
  }  
} 




Attribute Directive:

custom.css


.red {color:red;}  
.blue {color:blue}  
.cyan {color : cyan}  
.brown {color : brown} 



Attribute Directive:

app.component.html

<div>  
    <h3>This is a Attribute Directives</h3>  
    <span [class.red]="true">Attribute Change</span><br />  
    <span [ngClass]="{'blue':true}">Attribute Change by Using NgClass</span><br />  
    <span [ngStyle]="{'font-size':'14px','color':'green'}">Attribute Change by Using NgStyle</span>  
    <br /><br />  
    <span [class.cyan]="showColor">Attribute Change</span><br />  
    <span [ngClass]="{'brown':showColor}">Attribute Change by Using NgClass</span><br />  
    <input type="button" value="Change Color" (click)="changeColor()" />  
    <br /><br />  
    <span [class.cyan]="showColor">Attribute Change</span><br />  
    <span [ngClass]="{'cyan':showColor, 'red' : !showColor}">Attribute Change by Using NgClass</span><br />  
    <br />  
</div> 









import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  showColor: boolean = false; 
  clr:string = "green"; 
  constructor() { }  
  public changeColor(): void {  
      this.showColor = !this.showColor;
      this.clr=(this.clr=="green"?"orange":"green"); 
  }  
} 





<div>  
    <h3>This is a Attribute Directives</h3>  
    <span [class.red]="true">Attribute Change</span><br />  
    <span [ngClass]="{'blue':true}">Attribute Change by Using NgClass</span><br />  
    <span [ngStyle]="{'font-size':'14px','color':clr}">Attribute Change by Using NgStyle</span>  
    <br /><br />  
    <span [class.cyan]="showColor">Attribute Change</span><br />  
    <span [ngClass]="{'brown':showColor}">Attribute Change by Using NgClass</span><br />  
    <input type="button" value="Change Color" (click)="changeColor()" />  
    <br /><br />  
    <span [class.cyan]="showColor">Attribute Change</span><br />  
    <span [ngClass]="{'cyan':showColor, 'red' : !showColor}">Attribute Change by Using NgClass</span><br />  
    <br />  
</div>







import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  lft:boolean=true;
  rgt:boolean=false;
  ctr:boolean=false;


  constructor() { }  
  public left(): void {  
    this.lft=true;
    this.rgt=false;
    this.ctr=false;
        }  
         public rigt(): void {  
    this.lft=false;
    this.rgt=true;
    this.ctr=false;
        } 
         public centr(): void {  
    this.lft=false;
    this.rgt=false;
    this.ctr=true;
        }  
         
} 




<h1 [ngClass]="{'lft':lft, 'rgt' : rgt, 'ctr': ctr}">Hello World</h1><br />  
<button (click)="left()">left</button>
<button (click)="rigt()">right</button>
<button (click)="centr()">Center</button>




.red {color:red;}  
.blue {color:blue}  
.cyan {color : cyan}  
.brown {color : brown} 

.lft{text-align: left;}
.rgt{text-align: right;}
.ctr{text-align: center;}





Structural Directive: ngif

app.component.ts


import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  showInfo: boolean = false;  
  caption: string = 'Show Text';  
  constructor() { }  
  public changeData(): void {  
      this.showInfo = !this.showInfo;  
      if (this.showInfo) {  
          this.caption = 'Hide Text';        }  
      else {  
          this.caption = 'Show Text';       }  
  }  
} 



Structural Directive: ngif

app.component.html


<div>  
    <input type="button" value="{{caption}}" (click)="changeData()"/>  
    <br />  
    <h2 *ngIf="showInfo"><span>Demonstrate of Structural Directives - *ngIf</span></h2>  
</div>























