ng generate component message


Pass Input Value into Component: 
message.component.ts


import { Component, Input } from '@angular/core';  
 @Component({  
  selector: 'message-info',  
  templateUrl: './message.component.html',  
  styleUrls : ['./message.component.css']  
})  
export class MessageComponent {  
    @Input() public message :string = '';  
    @Input('alert-pop') public message1 :string= ''  
     public showAlert():void{  
        alert(this.message1);  
    }  
} 



Pass Input Value into Component: 

message.component.html

<div>  
    Message : <h2>{{message}}</h2>  
    <input type="button" value="Show Alert" (click)="showAlert()"/>  
</div> 





Pass Input Value into Component: 

app.component.ts

import { Component } from '@angular/core';  
 @Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
    public val: string = "This is alert popup message from app.component to @input metadata of message component";   
}  




Pass Input Value into Component: 

app.component.html



<h1>
  Hello
</h1>
<message-info 
[message]='"This is passed from app.component to message component"'
[alert-pop]="val"></message-info>










@Output : EventEmitter -> Emit event


Example: 

child.component.ts

import { Component, Input, Output,EventEmitter, OnInit } from '@angular/core';  

@Component({
  selector: 'app-child',
  templateUrl: './child.component.html',
  styleUrls: ['./child.component.css']
})
export class ChildComponent implements OnInit {  
   @Input() myinputMsg:string='';  
   @Output() myOutput:EventEmitter<string>= new EventEmitter();  
   outputMessage:string="I am child component."  
   constructor() { }  
   ngOnInit() {  
      console.log(this.myinputMsg);  
      alert(this.myinputMsg); 
   } 
   sendValues(){  
   	this.myOutput.emit(this.outputMessage);  
   }  
} 




Child.component.html

<p>child works!</p>
<button (click)="sendValues()"> Send Data </button> 





App.component.ts

import { Component } from '@angular/core';
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css'],
})
export class AppComponent {
GetChildData(data:string){  
   console.log(data);  
   alert(data);
}  
myInputMessage:string="My Input Message";
	}




App.component.html

<app-child [myinputMsg]="myInputMessage" (myOutput) ="GetChildData($event)"></app-child>  
<br>
  <br>
  <br>





import { Component } from '@angular/core';
@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css'],
})
export class AppComponent {
    data: string = "";
    GetChildData(data: string) {
        console.log(data);
        // alert(data);
        this.data = data;
    }
    fn() {
        alert(this.data);
    }


    myInputMessage: string = "My Input Message";
}





<app-child [myinputMsg]="myInputMessage" (myOutput) ="GetChildData($event)"></app-child>
<hr>
<button (click)="fn()">I am Parent button</button>  
<br>
  <br>
  <br>






A directive modifies the DOM by changing the appearance, behavior, or layout of DOM elements.
The main reason for using directives in any Angular applications are
Reusability
Readability
Maintainability
Types of Directives
There are three main types of directives in Angular 8+:
Component – Directives with templates.
Attribute Directives – Directives that change the behavior of a component or element but don’t affect the template.
Structural Directives – Directives that change the behavior of a component or element by affecting the template or the DOM decoration of the UI.





@Directive() metadata options:
selector – The selector property is used to identify the directive within the HTML template. Also, with the help of this property, we can initialize the directive from the DOM elements
inputs - It is used to provide the set of data-bound input properties of the directives.
outputs – It is used to enumerates any event properties from the directives.
providers – It is used to inject any provider type like service or components within the directives.
exportAs – It is used to define the name of the directives which can be used to assign a directive as a variable. 





Structural directives start with a * sign. 
These directives are used to manipulate and change the structure of the DOM elements.
*ngIf Directive: The ngIf allows us to Add/Remove DOM Element.
*ngSwitch Directive: The *ngSwitch allows us to Add/Remove DOM Element. It is similar to switch statement of Java.
*ngFor Directive: The *ngFor directive is used to repeat a portion of HTML template once per each item from an iterable list (Collection).





Attribute directives are used to change the look and behavior of the DOM elements. For example: ngClass directive, and ngStyle directive etc.
ngClass Directive: The ngClass directive is used to add or remove CSS classes to an HTML element.
ngStyle Directive: The ngStyle directive facilitates you to modify the style of an HTML element using the expression. You can also use ngStyle directive to dynamically change the style of your HTML element.






Attribute Directive:
app.component.ts

import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  showColor: boolean = false;  
  constructor() { }  
  public changeColor(): void {  
      this.showColor = !this.showColor;  
  }  
} 




Attribute Directive:

custom.css


.red {color:red;}  
.blue {color:blue}  
.cyan {color : cyan}  
.brown {color : brown} 



Attribute Directive:

app.component.html

<div>  
    <h3>This is a Attribute Directives</h3>  
    <span [class.red]="true">Attribute Change</span><br />  
    <span [ngClass]="{'blue':true}">Attribute Change by Using NgClass</span><br />  
    <span [ngStyle]="{'font-size':'14px','color':'green'}">Attribute Change by Using NgStyle</span>  
    <br /><br />  
    <span [class.cyan]="showColor">Attribute Change</span><br />  
    <span [ngClass]="{'brown':showColor}">Attribute Change by Using NgClass</span><br />  
    <input type="button" value="Change Color" (click)="changeColor()" />  
    <br /><br />  
    <span [class.cyan]="showColor">Attribute Change</span><br />  
    <span [ngClass]="{'cyan':showColor, 'red' : !showColor}">Attribute Change by Using NgClass</span><br />  
    <br />  
</div> 









import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  showColor: boolean = false; 
  clr:string = "green"; 
  constructor() { }  
  public changeColor(): void {  
      this.showColor = !this.showColor;
      this.clr=(this.clr=="green"?"orange":"green"); 
  }  
} 





<div>  
    <h3>This is a Attribute Directives</h3>  
    <span [class.red]="true">Attribute Change</span><br />  
    <span [ngClass]="{'blue':true}">Attribute Change by Using NgClass</span><br />  
    <span [ngStyle]="{'font-size':'14px','color':clr}">Attribute Change by Using NgStyle</span>  
    <br /><br />  
    <span [class.cyan]="showColor">Attribute Change</span><br />  
    <span [ngClass]="{'brown':showColor}">Attribute Change by Using NgClass</span><br />  
    <input type="button" value="Change Color" (click)="changeColor()" />  
    <br /><br />  
    <span [class.cyan]="showColor">Attribute Change</span><br />  
    <span [ngClass]="{'cyan':showColor, 'red' : !showColor}">Attribute Change by Using NgClass</span><br />  
    <br />  
</div>







import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  lft:boolean=true;
  rgt:boolean=false;
  ctr:boolean=false;


  constructor() { }  
  public left(): void {  
    this.lft=true;
    this.rgt=false;
    this.ctr=false;
        }  
         public rigt(): void {  
    this.lft=false;
    this.rgt=true;
    this.ctr=false;
        } 
         public centr(): void {  
    this.lft=false;
    this.rgt=false;
    this.ctr=true;
        }  
         
} 




<h1 [ngClass]="{'lft':lft, 'rgt' : rgt, 'ctr': ctr}">Hello World</h1><br />  
<button (click)="left()">left</button>
<button (click)="rigt()">right</button>
<button (click)="centr()">Center</button>




.red {color:red;}  
.blue {color:blue}  
.cyan {color : cyan}  
.brown {color : brown} 

.lft{text-align: left;}
.rgt{text-align: right;}
.ctr{text-align: center;}





Structural Directive: ngif

app.component.ts


import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  showInfo: boolean = false;  
  caption: string = 'Show Text';  
  constructor() { }  
  public changeData(): void {  
      this.showInfo = !this.showInfo;  
      if (this.showInfo) {  
          this.caption = 'Hide Text';        }  
      else {  
          this.caption = 'Show Text';       }  
  }  
} 



Structural Directive: ngif

app.component.html


<div>  
    <input type="button" value="{{caption}}" (click)="changeData()"/>  
    <br />  
    <h2 *ngIf="showInfo"><span>Demonstrate of Structural Directives - *ngIf</span></h2>  
</div>








<html>
    <body>
       X:  <input type="text" id="x">
        <br>
         Y:  <input type="text" id="y">
         <br>
         <input type="submit" id="op" value="+" onclick="fn()">
        <h2 id="res">Result: </h2>
         <script>
            function fn(){
                x=parseInt(document.getElementById("x").value);
                y=parseInt(document.getElementById("y").value);
                op=document.getElementById("op").value;
                if(op=="+")
                    fnOp(x,y,add);
            }
            function fnOp(a,b, fnN){
                fnN(a,b);
            }
            function add(a,b){
                document.getElementById("res").innerHTML += (a+b);
            }
            
         </script>
    </body>
</html>









Structural Directive: ngfor

app.component.ts

import { Component } from '@angular/core';  
 @Component({  
   selector: 'app-root',  
   templateUrl: './app.component.html',  
   styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  productList: Array<string> = [
  'iPhone 16 Pro Max',
  'Samsung Galaxy S25 Ultra',
  'Google Pixel 9 Pro',
  'OnePlus 13',
  'Nothing Phone 3a Pro',
  'Xiaomi 15 Ultra',
  'Oppo Find X8 Pro',
  'Motorola Razr Ultra (2025)'
];
     constructor() { }  
 }





Structural Directive: ngfor

app.component.html

<div>  
    <h2>Demonstrate ngFor</h2>  
    <ul>  
        <li *ngFor="let item of productList">  
            {{item}}  
        </li>  
    </ul>  
</div> 





Structural Directive: ngswitch

app.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  // List of phone options
  phones: string[] = ['iPhone', 'Samsung', 'Pixel', 'Other'];

  selectedPhone: string = this.phones[0]; // default

  changePhone(phone: string) {
    this.selectedPhone = phone;
  }
}




Structural Directive: ngswitch

app.component.html


<h2>ngSwitch Example</h2>

Dropdown generated dynamically
<select (change)="changePhone(($any($event).target.value))">
  <option *ngFor="let phone of phones" [value]="phone">
    {{ phone }}
  </option>
</select>

<!-- ngSwitch block -->
<div [ngSwitch]="selectedPhone">
  <p *ngSwitchCase="'iPhone'">You selected <b>Apple iPhone</b></p>
  <p *ngSwitchCase="'Samsung'">You selected <b>Samsung Galaxy</b></p>
  <p *ngSwitchCase="'Pixel'">You selected <b>Google Pixel</b></p>
  <p *ngSwitchDefault>Please select a valid phone model.</p>
</div>









app.module.ts:


import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ChildComponent } from './child/child.component';
import {FormsModule} from '@angular/forms';
import { MessageComponent } from './message/message.component';
import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    AppComponent,
    ChildComponent,
    MessageComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    ReactiveFormsModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }




ng generate directive shadow

ng generate directive highlight

ng generate directive shadows




Custom Directive:
highlight.directive.ts

import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';

@Directive({
  selector: '[appHighlight]' // Use it like an attribute
})
export class HighlightDirective {

  constructor(private el: ElementRef, private renderer: Renderer2) {}

  // When mouse enters, set background color
  @HostListener('mouseenter') onMouseEnter() {
    this.renderer.setStyle(this.el.nativeElement, 'background-color', 'yellow');
  }

  // When mouse leaves, remove background color
  @HostListener('mouseleave') onMouseLeave() {
    this.renderer.removeStyle(this.el.nativeElement, 'background-color');
  }
}





Custom Directive:
shadow.directive.ts

import { Directive, ElementRef, Renderer2 } from '@angular/core';

@Directive({ selector: '[appShadow]' })
export class ShadowDirective {
    constructor(elem: ElementRef, renderer: Renderer2) {
       renderer.setStyle(elem.nativeElement, 'box-shadow', '2px 2px 12px #58A362');
    }
}






Custom Directive:

shadows.directive.ts

import { Directive, ElementRef, Renderer2 } from '@angular/core';

@Directive({ selector: '[appShadows]' })
export class ShadowsDirective {
    constructor(elem: ElementRef, renderer: Renderer2) {
       renderer.setStyle(elem.nativeElement, 
        'box-shadow', '2px 2px 12px green');
       renderer.setStyle(elem.nativeElement, 
          'color', 'blue');
          let e=document.createElement("h1");
          let t=document.createTextNode("This is new");
          e.appendChild(t);
          renderer.appendChild(elem.nativeElement,e);
    }
}






Custom Directive:
app.component.ts

import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
}




Custom Directive:
app.component.html


<h2>Custom Directive Example</h2>

<span appShadow>Shadowed Text</span>
<span appShadows>Shadowed Text nicely</span>

<p appHighlight>
  Hover over this text to see the custom directive in action!
</p>







The most commonly used built-in pipes are:
Currency
Date
Uppercase
Lowercase
JSON
Decimal
Percent
Async





Pipes: app.component.ts

import { Component, OnInit } from '@angular/core';  
 @Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent implements OnInit {  
  public todayDate: Date;  
  public amount: number;  
  public message: string;  
  constructor() { 
   this.todayDate = new Date();  
    this.amount = 100;  
    this.message = "Angular 8.0 + is a Component Based Framework";  
}  
  ngOnInit(): void {  
    this.todayDate = new Date();  
    this.amount = 100;  
    this.message = "Angular 8.0 + is a Component Based Framework";  
  }  
} 



Pipes: app.component.html

<div>
  <h1>Demonstrate of Pipe in Angular 16</h1>
  <h2>Date Pipes</h2>
  Full Date : {{todayDate}}<br /> 
  Short Date : {{todayDate | date:'shortDate'}}<br />
  Medium Date : {{todayDate | date:'mediumDate'}}<br />
  Full Date : {{todayDate | date:'fullDate'}}<br />
  Time : {{todayDate | date:'HH:MM'}}<br /> 
  Time : {{todayDate | date:'hh:mm:ss a'}}<br />
  Time : {{todayDate | date:'hh:mm:ss p'}}<br />
  <h2>Number Pipes</h2>
  No Formatting : {{amount}}<br /> 
  2 Decimal Place : {{amount |number:'2.2-2'}}
  <h2>Currency Pipes</h2> No Formatting : {{amount}}<br />
  USD Dollar($) : {{amount |currency:'USD':true}}<br />
  USD Dollar : {{amount |currency:'USD':false}}<br />
  INR() : {{amount |currency:'INR':true}}<br /> 
  INR : {{amount |currency:'INR':false}}<br />
  <h2>String Related Pipes</h2>
  Actual Message : {{message}}<br /> 
  Lower Case : {{message | lowercase}}<br />
  Upper Case : {{message | uppercase}}<br />
  <h2> Percentage Pipes</h2>
  2 Place Formatting : {{amount | percent :'.2'}}<br /><br />
</div>
































