ng generate component message


Pass Input Value into Component: 
message.component.ts


import { Component, Input } from '@angular/core';  
 @Component({  
  selector: 'message-info',  
  templateUrl: './message.component.html',  
  styleUrls : ['./message.component.css']  
})  
export class MessageComponent {  
    @Input() public message :string = '';  
    @Input('alert-pop') public message1 :string= ''  
     public showAlert():void{  
        alert(this.message1);  
    }  
} 



Pass Input Value into Component: 

message.component.html

<div>  
    Message : <h2>{{message}}</h2>  
    <input type="button" value="Show Alert" (click)="showAlert()"/>  
</div> 





Pass Input Value into Component: 

app.component.ts

import { Component } from '@angular/core';  
 @Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
    public val: string = "This is alert popup message from app.component to @input metadata of message component";   
}  




Pass Input Value into Component: 

app.component.html



<h1>
  Hello
</h1>
<message-info 
[message]='"This is passed from app.component to message component"'
[alert-pop]="val"></message-info>










@Output : EventEmitter -> Emit event


Example: 

child.component.ts

import { Component, Input, Output,EventEmitter, OnInit } from '@angular/core';  

@Component({
  selector: 'app-child',
  templateUrl: './child.component.html',
  styleUrls: ['./child.component.css']
})
export class ChildComponent implements OnInit {  
   @Input() myinputMsg:string='';  
   @Output() myOutput:EventEmitter<string>= new EventEmitter();  
   outputMessage:string="I am child component."  
   constructor() { }  
   ngOnInit() {  
      console.log(this.myinputMsg);  
      alert(this.myinputMsg); 
   } 
   sendValues(){  
   	this.myOutput.emit(this.outputMessage);  
   }  
} 




Child.component.html

<p>child works!</p>
<button (click)="sendValues()"> Send Data </button> 





App.component.ts

import { Component } from '@angular/core';
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css'],
})
export class AppComponent {
GetChildData(data:string){  
   console.log(data);  
   alert(data);
}  
myInputMessage:string="My Input Message";
	}




App.component.html

<app-child [myinputMsg]="myInputMessage" (myOutput) ="GetChildData($event)"></app-child>  
<br>
  <br>
  <br>





import { Component } from '@angular/core';
@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css'],
})
export class AppComponent {
    data: string = "";
    GetChildData(data: string) {
        console.log(data);
        // alert(data);
        this.data = data;
    }
    fn() {
        alert(this.data);
    }


    myInputMessage: string = "My Input Message";
}





<app-child [myinputMsg]="myInputMessage" (myOutput) ="GetChildData($event)"></app-child>
<hr>
<button (click)="fn()">I am Parent button</button>  
<br>
  <br>
  <br>






A directive modifies the DOM by changing the appearance, behavior, or layout of DOM elements.
The main reason for using directives in any Angular applications are
Reusability
Readability
Maintainability
Types of Directives
There are three main types of directives in Angular 8+:
Component – Directives with templates.
Attribute Directives – Directives that change the behavior of a component or element but don’t affect the template.
Structural Directives – Directives that change the behavior of a component or element by affecting the template or the DOM decoration of the UI.








