public String getMessage()
Returns a detailed message about the exception that has occurred. This message is initialized in the Throwable constructor.
public Throwable getCause()
Returns the cause of the exception as represented by a Throwable object.
public String toString()
Returns the name of the class concatenated with the result of getMessage()
public void printStackTrace()
Prints the result of toString() along with the stack trace to System.err, the error output stream.
public StackTraceElement [] getStackTrace()
Returns an array containing each element on the stack trace. The element at index 0 represents the top of the call stack, and the last element in the array represents the method at the bottom of the call stack.
public Throwable fillInStackTrace()
Fills the stack trace of this Throwable object with the current stack trace, adding to any previous information in the stack trace







package Day2;

public class ExceptEg {

	public static void main(String[] args) {
		java.util.Scanner sc = new java.util.Scanner(System.in);
		int[] a = new int[2];
		try {
			System.out.println("Enter Numerator: ");
			a[0] = sc.nextInt();
			System.out.println("Enter Denominator: ");
			a[1] = sc.nextInt();
			a[2] = a[0]/a[1];
			System.out.println("Division : " + a[2]);
		}
		catch(ArithmeticException e) {
			System.out.println(e);
		}
		catch(java.util.InputMismatchException e) {
			System.out.println(e);
		}
		catch(ArrayIndexOutOfBoundsException e) {
			System.out.println(e);
		}
		catch(Exception e) {
			System.out.println(e);
		}
		System.out.println("Program Continues..");
	}







package Day2;

public class ExceptEg2 {

	public static void main(String[] args) {
		System.out.println("Enter Age:");
		int age=new java.util.Scanner(System.in).nextInt();
		try {
		if(age<18) {
			throw new ArithmeticException("Invalid Age for Voting!!");
		}
		}
		catch(ArithmeticException e) {
			System.out.println(e);
		}
		System.out.println("Program Continues..");
	}

}


}









package Day2;

public class ExceptEg2 {
	public void validateAge(int age) throws java.io.IOException{
		if(age<18) {
			throw new java.io.IOException("Invalid Age for Voting!!");
		}
		System.out.println("Age is valid for voting!");
	}

	public static void main(String[] args) throws java.io.IOException{
		System.out.println("Enter Age:");
		int age=new java.util.Scanner(System.in).nextInt();
		new ExceptEg2().validateAge(age);
		System.out.println("Program Continues..");
	}

}





package Day2;

public class ExceptEg2 {
	public void validateAge(int age) throws java.io.IOException{
		if(age<18) {
			throw new java.io.IOException("Invalid Age for Voting!!");
		}
		System.out.println("Age is valid for voting!");
	}
	
	public void takeAge() throws java.io.IOException {
		System.out.println("Enter Age:");
		int age=new java.util.Scanner(System.in).nextInt();
		validateAge(age);
	}

	public static void main(String[] args) {
		try {
		new ExceptEg2().takeAge();
		}
		catch(Exception e) {System.out.println(e);}
		
		System.out.println("Program Continues..");
	}

}







package Day2;
class Pa{
	public void fnIOExcept() throws java.io.IOException{}
	public void fnArithExcept() throws ArithmeticException{}
	public void fn() {}
}
class Child1 extends Pa{
	@Override
	public void fnIOExcept() throws java.io.IOException{}
	@Override
	public void fnArithExcept() throws ArithmeticException{}
	@Override
	public void fn() {}
}

class Child2 extends Pa{
	@Override
	public void fnIOExcept() {}
	@Override
	public void fnArithExcept() {}
	@Override
	public void fn() {}
}
class Child3 extends Pa{
	@Override
	public void fnIOExcept() {}//throws Exception{}  
	//Not allowed: Parent Exception class in overridden method
	@Override
	public void fnArithExcept() {} //throws ClassNotFoundException{}
	@Override
	public void fn() {}
}
class Child4 extends Pa{
	@Override
	public void fnIOExcept() throws ArithmeticException{}
	@Override
	public void fnArithExcept() throws ArithmeticException{}
	@Override
	public void fn() {}
}

public class ExceptInheritEg {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}





package Day2;
class Res implements AutoCloseable{
	public void close() {
		System.out.println("Res closed");
	}
	public void toDo() {
		System.out.println("Res working..");
	}
}


public class ExceptFinallyEg {
	public static int fn(Res r) {
		r.toDo();
		try {
			int x=10;
			int y=0;
			int z=x/y;
			if(z!=0)
				return z;
		}
		catch(ArithmeticException e) {
			System.out.println(e);
			return 0;
		}
		finally { //either line by line execute it, or run this block before returning from the fn
			r.close();
		}
		return 0;
	}

	public static void main(String[] args) {
		int result=fn(new Res());
		System.out.println("Result: " + result);
		System.out.println("Program Continue..");
	}

}







