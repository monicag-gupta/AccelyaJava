Spring Cloud Config Server
Spring Cloud Config Server provides the HTTP resource-based API for external configuration in the distributed system. We can enable the Spring Cloud Config Server by using the annotation @EnableConfigServer.
Netflix Eureka Naming Server
Netflix Eureka Server is a discovery server. It provides the REST interface to the outside for communicating with it. A microservice after coming up, register itself as a discovery client. The Eureka server also has another software module called Eureka Client. Eureka client interacts with the Eureka server for service discovery. The Eureka client also balances the client requests.
Hystrix Server
Hystrix server acts as a fault-tolerance robust system. It is used to avoid complete failure of an application. It does this by using the Circuit Breaker mechanism. If the application is running without any issue, the circuit remains closed. If there is an error encountered in the application, the Hystrix Server opens the circuit. The Hystrix server stops the further request to calling service. It provides a highly robust system.
Netflix Zuul API Gateway Server
Netflix Zuul Server is a gateway server from where all the client request has passed through. It acts as a unified interface to a client. It also has an inbuilt load balancer to load the balance of all incoming request from the client.
Netflix Ribbon
Netflix Ribbon is the client-side Inter-Process Communication (IPC) library. It provides the client-side balancing algorithm. It uses a Round Robin Load Balancing: Load balancing, Fault tolerance, Multiple protocols(HTTP, TCP, UDP), Caching and Batching
Zipkin Distributed Server
Zipkin is an open-source project m project. That provides a mechanism for sending, receiving, and visualization traces.






Application
Port
Spring Cloud Config Server
8888
Netflix Eureka Naming Server
8761
Netflix Zuul API gateway Server
8765
Zipkin distributed Tracing Server
9411




SB Project:
limits-service

Group: com.example.demo
Package:
com.example.demo



Spring Web, Spring Boot DevTools, Spring Boot Actuator, Config Client, Cloud Bootstrap


application.properties:

spring.application.name=limits-service
spring.cloud.config.enabled=false



com.example.demo.controller
LimitsConfigurationController

package com.example.demo.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import  com.example.demo.bean.LimitConfiguration;
@RestController
public class LimitsConfigurationController {
	@GetMapping("/limits")
	public LimitConfiguration retriveLimitsFromConfigurations() {
		return new LimitConfiguration(1000, 1);
	}
}





com.example.demo.bean
LimitConfiguration

package com.example.demo.bean;

public class LimitConfiguration {
	private int maximum;
	private int minimum;
//no-argument constructor  
	protected LimitConfiguration() {
	}
//generating getters  
	public int getMaximum() {
		return maximum;
	}
	public int getMinimum() {
		return minimum;
	}
//genetrating constructor using fields  
	public LimitConfiguration(int maximum, int minimum) {
		super();
		this.maximum = maximum;
		this.minimum = minimum;
	}
}



com.example.demo
Configuration

package com.example.demo;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;
@Component
@ConfigurationProperties("limits-service")
public class Configuration {
	private int maximum;
	private int minimum;
	public void setMaximum(int maximum) {
		this.maximum = maximum;		}
	public void setMinimum(int minimum) {
		this.minimum = minimum;		}
	public int getMaximum() {
		return maximum;		}
	public int getMinimum() {
		return minimum;		}
}




LimitsConfigurationController:

package com.example.demo.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.demo.bean.LimitConfiguration;
import com.example.demo.*;
@RestController
public class LimitsConfigurationController {
	@Autowired
	private Configuration configuration;
	@GetMapping("/limits")
	public LimitConfiguration retriveLimitsFromConfigurations() {
//getting values from the properties file  
		return new LimitConfiguration(configuration.getMaximum(), configuration.getMinimum());
	}
}



application.properties:

spring.application.name=limits-service
spring.cloud.config.enabled=false

limits-service.minimum=99  
limits-service.maximum=9999 






Example:
Project: Eureka Server

Create a spring starter project: eureka-server
Package: com.eureka_server

Add Eureka server as dependency

Edit application.properties
Main class: EurekaServerApplication






package com.eureka_server;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

@SpringBootApplication
@EnableEurekaServer
public class EurekaServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(EurekaServerApplication.class, args);
	}

}





spring.application.name=eureka-server
server.port=8761
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.instance.hostname=localhost

