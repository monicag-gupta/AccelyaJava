Create the springBoot starter Project in Eclipse
Eclipse → File → New → Spring Starter Project
Fill in:
  Name: SBMVC
  Group: com.sbmvc
  Artifact: SBMVC
  Package: com.sbmvc
  Java Version: 21
  Packaging: war (NOT jar for JSP support)
Click Next
Select dependencies:
  Spring Web
Click Finish
  Run as -> Maven clean install





Add in the project:
src/main/java/com/sbmvc/controller/HomeController.java
src/main/webapp/WEB-INF/jsp/home.jsp

Check:
src/main/java/com/sbmvc/SbmvcApplication.java
src/main/java/com/sbmvc/ServletInitializer.java

Edit:
application.properties

Code accordingly



package com.sbmvc.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    @GetMapping("/")
    public String home() {
        return "home"; // maps to home.jsp
    }
}




home.jsp:

<%@ page contentType="text/html;charset=UTF-8" %>
<html>
<head>
    <title>SBMVC Home</title>
</head>
<body>
    <h1>Hello from Spring Boot MVC using JSP!</h1>
</body>
</html>




application.properties:

spring.application.name=SBMVC

# JSP Configuration
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

# Server port (optional)
server.port=8080

logging.level.org.springframework.web=DEBUG




<!-- JSP Engine -->
<dependency>
    <groupId>org.apache.tomcat.embed</groupId>
    <artifactId>tomcat-embed-jasper</artifactId>
</dependency>
<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>jstl</artifactId>
    <version>1.2</version>
</dependency>





Right click project->run as->maven build..
Goal : clean install spring-boot:run

Apply
Run



SB with JDBC:


Drop table employee;
CREATE TABLE employee (
    id int PRIMARY KEY,
    name VARCHAR2(100),
    department VARCHAR2(100)
);






Spring Starter Project
CRUDJsp
Group and package: com.crudjsp
War
Java 21
Maven
Add Dependencies: Oracle driver, Spring Web




<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-jdbc</artifactId>
</dependency>

<!-- JSP Engine -->
<dependency>
	<groupId>org.apache.tomcat.embed</groupId>
	<artifactId>tomcat-embed-jasper</artifactId>
</dependency>
<dependency>
	<groupId>org.glassfish.web</groupId>
	<artifactId>jakarta.servlet.jsp.jstl</artifactId>
</dependency>


application.properties:

spring.application.name=CRUDJsp
spring.datasource.url= jdbc:oracle:thin:@//localhost:1521/orclpdb.localdomain
spring.datasource.username=mydb
spring.datasource.password=oracle
spring.datasource.driver-class-name= oracle.jdbc.driver.OracleDriver

spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp






src/
├── main/
│   ├── java/com/crudjsp/
│   │   ├── CrudJspApplication.java
│   │   ├── controller/EmployeeController.java
│   │   ├── dao/EmployeeDAO.java
│   │   ├── dao/EmployeeDAOImpl.java
│   │   ├── model/Employee.java
│   └── webapp/WEB-INF/jsp/
│       ├── index.jsp
│       ├── add.jsp
│       └── edit.jsp





package com.crudjsp.model;

public class Employee {
    private int id;
    private String name;
    private String department;
	public int getId() {	return id;	}
	public void setId(int id) {		this.id = id;	}
	public String getName() {		return name;	}
	public void setName(String name) {		this.name = name;	}
	public String getDepartment() {		return department;	}
	public void setDepartment(String department) {		this.department = department;	}
	public Employee(int id, String name, String department) {
		this.id = id;
		this.name = name;
		this.department = department;
	}
	public Employee() {}
}



package com.crudjsp.dao;

import com.crudjsp.model.Employee;
import java.util.List;

public interface EmployeeDAO {
    void save(Employee emp);
    void update(Employee emp);
    void delete(int id);
    Employee findById(int id);
    List<Employee> findAll();
}





package com.crudjsp.dao;

import com.crudjsp.model.Employee;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class EmployeeDAOImpl implements EmployeeDAO {

    private final JdbcTemplate jdbcTemplate;

    public EmployeeDAOImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void save(Employee emp) {
        String sql = "INSERT INTO employee ( name, department, id) VALUES (?, ?, ?)";
        jdbcTemplate.update(sql, emp.getName(), emp.getDepartment(), emp.getId());
    }

    public void update(Employee emp) {
        String sql = "UPDATE employee SET name=?, department=? WHERE id=?";
        jdbcTemplate.update(sql, emp.getName(), emp.getDepartment(), emp.getId());
    }

    public void delete(int id) {
        jdbcTemplate.update("DELETE FROM employee WHERE id=?", id);
    }

    public Employee findById(int id) {
        return jdbcTemplate.queryForObject("SELECT * FROM employee WHERE id=?",
                new BeanPropertyRowMapper<>(Employee.class), id);
    }

    public List<Employee> findAll() {
        return jdbcTemplate.query("SELECT * FROM employee",
                new BeanPropertyRowMapper<>(Employee.class));
    }
}


























