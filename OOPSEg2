package Day2;

interface MathOperations {
	void sum(int a, int b);

	void multiply(int a, int b);

	void sum(String a, String b);

	void multiply(String a, int b);

	default void sub(int a, int b) {
		System.out.println(a > b ? a - b : b - a);
	}

	default void div(int a, int b) {
		System.out.println(b == 0 ? 0 : a / b);
	}
}

interface StringOperations {
	void sum(String a, String b);

	void multiply(String a, int b);

	default void sub(int a, int b) {
		System.out.println(a > b ? a - b : b - a);
	}

	default void div(int a, int b) {
		System.out.println(b == 0 ? 0 : a / b);
	}
}

class Child implements MathOperations, StringOperations {
	@Override
	public void sum(int a, int b) {
		System.out.println(a + b);
	}

	@Override
	public void multiply(int a, int b) {
		System.out.println(a * b);
	}

	@Override
	public void sum(String a, String b) {
		System.out.println(a + b);
	}

	@Override
	public void multiply(String a, int b) {
		String s = a;
		for (int i = 0; i < b; i++) {
			s = s + a;
		}
		System.out.println(s);
	}

	public void sub(int a, int b) {
		System.out.println(a > b ? a - b : b - a);
	}

	public void div(int a, int b) {
		System.out.println(b == 0 ? 0 : a / b);
	}
}

interface Being {
	void breathe();
}

abstract class Animal implements Being {
	public void eat() {
		System.out.println("All animals eat");
	}

	public abstract void move();
}

class Dog extends Animal implements Being {
	public void breathe() {
		System.out.println("All dogs breathe");
	}

	public void move() {
		System.out.println("Dogs move on four legs");
	}

	public void bark() {
		System.out.println("Dogs Bark");
	}
}

class Cat extends Animal implements Being {
	public void breathe() {
		System.out.println("All Cats breathe");
	}

	public void move() {
		System.out.println("Cats move on four legs");
	}

	public void Meow() {
		System.out.println("Cats Meow");
	}
}

class Horse extends Animal implements Being {
	public void breathe() {
		System.out.println("All Horse breathe");
	}

	public void move() {
		System.out.println("Horse move on four legs");
	}

	public void Run() {
		System.out.println("Horse runs fast");
	}
}

public class InheritanceEg {

	public static void AnimalTrainer(Animal a) { // up casting
		a.breathe();
		a.eat();
		a.move();
		if (a instanceof Dog) {
			Dog d = (Dog) a; // down casting
			d.bark();
		}
		if (a instanceof Cat) {
			Cat d = (Cat) a; // down casting
			d.Meow();
		}
	}

	public static void main(String[] args) {
		AnimalTrainer(new Dog());
		AnimalTrainer(new Cat());
		AnimalTrainer(new Horse());
	}

}





package Day2;
final class myLinux{
	public final int year = 2004;
	public final int space;
	public myLinux() {
		space=1024;
	}
	public myLinux(int sp) {
		space=sp;
	}
	public final void author() {
		System.out.println("Author: Limus");
		System.out.println("In year: " + year + " space required : " + space);
	}
}
class myUbunto
//extends myLinux{
{
//	@Override
//	public void author() {
//		System.out.println("Author: Jim");
//	}
}
public class FinalEg {

	public static void main(String[] args) {
		myLinux l=new myLinux(9078);
		l.author();
		
		myLinux l2=new myLinux();
		l2.author();
		//l2.year =2009;
	}

}








package Day2;

class GP{
	protected void gold() {
		System.out.println("Gold");
	}
}
class Pa extends GP {
	@Override
	public void gold() {
		System.out.println("My Gold");
	}
}


public class InheritanceEg2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}








package Day2;
interface Iter{
	void navigate();
}
class myArray {
	private int[] a=new int[100];
	private int tos=0;
	public myArray(){}
	public void add(int ele) {
		if(tos<100)
			a[tos++]=ele;
	}
	public Iter iter() {
		return this.new AryIter();
	}
	class AryIter implements Iter{
		public void navigate() {
			for(int i=0; i<tos;i++) {
				System.out.println(a[i]);
			}
		}
	}
}
class Outer{
	class Inner{
		public void innerfn() {
			System.out.println("InnerFn");
		}
	}
	static class staticInner{
		public void innerfn2() {
			System.out.println("InnerFn");
		}
	}
	static class Inner2{
		public static void staticinnerfn() {
			System.out.println("InnerFn");
		}
	}
	
}
public class InnerClassEg {

	public static void main(String[] args) {
		Outer o=new Outer();
		Outer.Inner i = o.new Inner();
		i.innerfn();
		Outer.staticInner i2 = new Outer.staticInner();
		i2.innerfn2();
		Outer.Inner2.staticinnerfn();
		myArray arr=new myArray();
		arr.add(10);arr.add(20);arr.add(30);arr.add(40);
		Iter I=arr.iter();
		I.navigate();
		
		
	}

}

















