RxJS (Reactive Extensions for JavaScript) is a library for reactive programming using Observables.
Angular’s HttpClient returns Observables, making RxJS the core tool for handling REST API calls, async streams, and event handling.
An Observable is a way to handle asynchronous data streams.Think of it as a “data producer” that keeps sending values over time, and your code can subscribe to receive those values.
It’s part of RxJS (Reactive Extensions for JavaScript), and Angular uses it heavily.
Common RxJS Operators with REST
When calling REST APIs, you typically use these RxJS operators:
map → Transform response data.
catchError → Handle API errors.
tap → Perform side effects (like logging).
switchMap → Chain API calls (cancel previous one if new request fires).
mergeMap → Run multiple requests in parallel.
debounceTime → Delay requests (useful in search). 



In module.ts
Modules are IMPORTED
Services, pipes, directives, components are DECLARED
Services are PROVIDED
first component to be executed are BOOTSTRAPED
Declarations can be EXPORTED




Install dependencies
npm install rxjs
(RxJS comes with Angular, so you usually don’t need to install it separately.)
Import HttpClientModule
Add it in your app.module.ts:

import { HttpClientModule } from '@angular/common/http';

@NgModule({
  imports: [HttpClientModule],
})
export class AppModule {}




Example: REST API Service (GET, POST)
product.service.ts

// product.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

export interface Product {
  id: number;
  title: string;
  price: number;
  image: string;
}

@Injectable({ providedIn: 'root' })
export class ProductService {
  private apiUrl = 'https://fakestoreapi.com/products';

  constructor(private http: HttpClient) {}

  // GET all products
  getProducts(): Observable<Product[]> {
    return this.http.get<Product[]>(this.apiUrl).pipe(
      map((data) => data), // transform if needed
      catchError(this.handleError)
    );
  }

  // POST new product
  addProduct(product: Product): Observable<Product> {
    return this.http.post<Product>(this.apiUrl, product).pipe(
      catchError(this.handleError)
    );
  }

  // Handle API errors
  private handleError(error: HttpErrorResponse) {
    console.error('API Error:', error.message);
    return throwError(() => new Error('Something went wrong!'));
  }
}



Explanation:

this.http.get<Product[]>(this.apiUrl)
Makes a GET request to this.apiUrl (e.g., https://fakestoreapi.com/products).
<Product[]> is a generic type that tells Angular: “I expect the response to be an array of Product objects.”
Because of this, data in the stream will already be typed as Product[].
.pipe(...)
pipe() lets you chain RxJS operators that transform or handle the observable stream.
map((data) => data)
map is an RxJS operator.
Here it’s not doing anything (just returning data as-is).
But you could transform the response if needed.Example: only return id and title:
map((data) => data.map(item => ({ id: item.id, title: item.title })))
catchError(this.handleError)
catchError lets you handle errors in the observable chain.
this.handleError should be a method in your service that takes the error and returns a new observable (usually throwError).



Using Service in a Component

app.component.ts


// app.component.ts
import { Component, OnInit } from '@angular/core';
import { ProductService, Product } from './product.service';

@Component({
  selector: 'app-root',
  template: `
    <h2>Product List</h2>
    <ul>
      <li *ngFor="let p of products">
        <br><br>
        <img src={{p.image}} alt="Bad Image URL" height="100" width="100"/><br>
        {{p | json}} <br><br>
         {{ p.title }} - {{ p.price }}
        <hr>
      </li>
    </ul>
  `
})
export class AppComponent implements OnInit {
  products: Product[] = [];

  constructor(private productService: ProductService) {}

  ngOnInit() {
    this.productService.getProducts().subscribe({
      next: (data) => (this.products = data),
      error: (err) => console.error(err)
    });
  }
}






The whole cycle
1. Component initializes → ngOnInit() runs.
2. Service method (getProducts) is called.
3. HTTP request is sent.
4. When response arrives:
If success → next runs → UI updates.
If failure → error runs → logs or shows error message.

Observable lifecycle
An Observable can emit:
Next → a new value/data is sent.
Error → something went wrong.
Complete → it’s done, no more values.



Where it runs
ngOnInit() is a lifecycle hook in Angular.
It’s the right place to fetch data from a service (like calling an API).
Step 1: Call the service : this.productService.getProducts()
This calls the method from your ProductService.
That method uses HttpClient to make an HTTP GET request to the API (e.g., https://fakestoreapi.com/products).
It returns an Observable<Product[]>.
Step 2: Subscribe to the Observable : .subscribe({...})
Observables are lazy → they don’t actually run until you subscribe.
By subscribing, you’re saying: “Execute this HTTP request and notify me when data arrives or if there’s an error.”
Step 3: Handle the success case : next: (data) => this.products = data
When the HTTP request succeeds, the API response (data) is passed here.
this.products = data; saves the fetched array of products into your component property.
This automatically updates the HTML template via Angular’s data binding.
Step 4: Handle the error case : error: (err) => console.error(err)
If the HTTP request fails (e.g., server down, wrong URL, no internet), this block runs.
Right now, it just logs the error in the browser console.
You could also show a user-friendly message, like “Failed to load products.”



Generate a Feature Module
  ng generate module items
This creates a folder src/app/items with:
  items.module.ts
Generate a Component inside Product Module
  ng generate component items/product-list
This creates:
product-list.component.ts
product-list.component.html
Added to items.module.ts automatically.




src/app/items/product-list/product-list.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-product-list',
  templateUrl: './product-list.component.html'
})
export class ProductListComponent {
  products = [
    { name: 'iPhone 16', price: 1299 },
    { name: 'Samsung Galaxy S25', price: 1199 },
    { name: 'Pixel 10', price: 899 }
  ];
}




src/app/items/product-list/product-list.component.html

<h2>Product List</h2>
<ul>
  <li *ngFor="let product of products">
    {{ product.name }} - ${{ product.price }}
  </li>
</ul>


src/app/items/items.module.ts

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ProductListComponent } from './product-list/product-list.component';

@NgModule({
  declarations: [ProductListComponent], // Component belongs to this module
  imports: [CommonModule],              // Provides ngFor, ngIf etc.
  exports: [ProductListComponent]       // Export to use in AppModule
})
export class ItemsModule { }




Import ProductModule in AppModulesrc/app/app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { ItemsModule } from './items/items.module'; // import module

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, ItemsModule],  // add here
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}



src/app/app.component.ts

// app.component.ts
import { Component, OnInit } from '@angular/core';
import { ProductService, Product } from './product.service';

@Component({
  selector: 'app-root',
  templateUrl:'./app.component.html'
})
export class AppComponent implements OnInit {
  products: Product[] = [];

  constructor(private productService: ProductService) {}

  ngOnInit() {
    this.productService.getProducts().subscribe({
      next: (data) => (this.products = data),
      error: (err) => console.error(err)
    });
  }
}




Use Product Component in AppComponentsrc/app/app.component.html

<app-product-list></app-product-list>





Example: JWT Authentication

cd..
ng new ng2app

ng generate component login
ng generate component dashboard




























