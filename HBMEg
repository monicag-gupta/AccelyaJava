Create a maven project : 
Tick : Create a simple Project
Group id: com.hibernate
Artifact id: HBM_Prj1
Name: HBM_Prj1

Add dependencies in pom.xml
Add Codes
Run the project






<project xmlns="http://maven.apache.org/POM/4.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>
<groupId>com.hibernate</groupId>
<artifactId>HBM_Prj1</artifactId>
<version>0.0.1-SNAPSHOT</version>
<name>HBM_Prj1</name>
<description>HBM_Prj1
HBM_Prj1
HBM_Prj1
HBM_Prj1</description>




<dependencies>
<!-- https://mvnrepository.com/artifact/org.hibernate.orm/hibernate-core -->
<dependency>
<groupId>org.hibernate.orm</groupId>
<artifactId>hibernate-core</artifactId>
<version>7.1.1.Final</version>
</dependency>
<!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc11 -->
<dependency>
<groupId>com.oracle.database.jdbc</groupId>
<artifactId>ojdbc11</artifactId>
<version>23.9.0.25.07</version>
</dependency>
<!-- JPA API -->
<dependency>
<groupId>jakarta.persistence</groupId>
<artifactId>jakarta.persistence-api</artifactId>
<version>3.2.0</version>
</dependency>

        <!-- Jakarta Validation API (optional but recommended for Hibernate 7) -->
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <version>3.0.2</version>
        </dependency>
</dependencies>

<properties>
    <!-- Java version -->
    <java.version>21</java.version>

    <!-- Compiler settings -->
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <maven.compiler.release>${java.version}</maven.compiler.release>
    

    <!-- Encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    
    
</properties>

</project>






Add a package files in src folder 
        com.hibernate
                Add HibernateUtil.java 
Add the hibernate.cfg.xml file directly in resources folder
Execute the program




package com.hibernate;
import org.hibernate.SessionFactory;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
public class HibernateUtil {
 final static StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure().build();
    private static SessionFactory sessionFactory=null;
    private static SessionFactory buildSessionFactory() {
        try {            
            sessionFactory = new MetadataSources( registry ).buildMetadata().buildSessionFactory();
            return sessionFactory;        }
        catch (Exception e) {
             StandardServiceRegistryBuilder.destroy( registry );
            throw new ExceptionInInitializerError(e);        }
    }     
    public static SessionFactory getSessionFactory() {
        if(sessionFactory==null){
            buildSessionFactory();
        }        return sessionFactory;
    }    }








<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <!-- Database connection settings -->
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@//localhost:1521/orclpdb.localdomain</property>
        <property name="hibernate.connection.username">mydb</property>
        <property name="hibernate.connection.password">oracle</property>

        <!-- JDBC connection pool (use built-in) -->
        <property name="hibernate.connection.pool_size">1</property>

        <!-- SQL Dialect (Hibernate 7.x uses generic OracleDialect) -->
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>

        <!-- Show SQL -->
        <property name="hibernate.show_sql">true</property>

        <!-- Auto schema generation -->
        <property name="hibernate.hbm2ddl.auto">create</property>

        <!-- Mention your entity classes -->
        <mapping class="com.hibernate.Student_Info"/>
    </session-factory>
</hibernate-configuration>






package com.hibernate;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "STUDENT_INFORMATION")
public class Student_Info {
	@Id
	private int roll_no;
	private String name;

	public Student_Info() {
	}

	public Student_Info(String name, int roll_no) {
		this.name = name;
		this.roll_no = roll_no;
	}

	public int getRoll_no() {
		return roll_no;
	}

	public void setRoll_no(int roll_no) {
		this.roll_no = roll_no;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
}







package com.hibernate;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
public class Main {
   public static void main(String[] args) {
       Student_Info student = new Student_Info();
       student.setName("AAA");
       student.setRoll_no(1);
       SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
       Session session = sessionFactory.openSession();
       session.beginTransaction();
       session.persist(student);
       session.getTransaction().commit();
       session.close();
       sessionFactory.close();
} }










HibernateUtil.java


package com.hibernate;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class HibernateUtil {

    private static final SessionFactory sessionFactory = buildSessionFactory();

    private static SessionFactory buildSessionFactory() {
        try {
            // Create Configuration instance
            Configuration cfg = new Configuration();

            // Database connection settings
            cfg.setProperty("hibernate.connection.driver_class", "oracle.jdbc.driver.OracleDriver");
            cfg.setProperty("hibernate.connection.url", "jdbc:oracle:thin:@//localhost:1521/orclpdb.localdomain");
            cfg.setProperty("hibernate.connection.username", "mydb");
            cfg.setProperty("hibernate.connection.password", "oracle");

            // JDBC connection pool
            cfg.setProperty("hibernate.connection.pool_size", "1");

            // SQL Dialect
            cfg.setProperty("hibernate.dialect", "org.hibernate.dialect.OracleDialect");

            // Disable second-level cache
            cfg.setProperty("hibernate.cache.provider_class", "org.hibernate.cache.NoCacheProvider");

            // Show SQL
            cfg.setProperty("hibernate.show_sql", "true");

            // hbm2ddl.auto
            cfg.setProperty("hibernate.hbm2ddl.auto", "create");

            // Add annotated class
            cfg.addAnnotatedClass(Student_Info.class);

            // Build SessionFactory
            return cfg.buildSessionFactory();

        } catch (Throwable ex) {
            System.err.println("Initial SessionFactory creation failed." + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }

    public static SessionFactory getSessionFactory() {
        return sessionFactory;
    }

    public static void shutdown() {
        // Close caches and connection pools
        getSessionFactory().close();
    }
}










CRUD with HBM:

Student

package com.hibernate;

import java.io.Serializable;
import jakarta.persistence.*;

@Entity
@Table(name = "STUDENT")
public class Student implements Serializable {
	private static final long serialVersionUID = 8633415090390966715L;
	@Id
	@Column(name = "ID")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;
	@Column(name = "STUDENT_NAME")
	private String studentName;
	@Column(name = "ROLL_NUMBER")
	private int rollNumber;
	@Column(name = "COURSE")
	private String course;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getStudentName() {
		return studentName;
	}

	public void setStudentName(String studentName) {
		this.studentName = studentName;
	}

	public int getRollNumber() {
		return rollNumber;
	}

	public void setRollNumber(int rollNumber) {
		this.rollNumber = rollNumber;
	}

	public String getCourse() {
		return course;
	}

	public void setCourse(String course) {
		this.course = course;
	}
}









CreateStudent

package com.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class CreateStudent {
	public static void main(String[] args) {
		// Create student entity object
		Student student = new Student();
		student.setStudentName("John"); // John, Jane, Bob
		student.setRollNumber(01); // 01, 02,  03
		student.setCourse("MCA"); // MCA, BE, BTech
		// Create session factory object
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		// getting session object from session factory
		Session session = sessionFactory.openSession();
		// getting transaction object from session object
		session.beginTransaction();
		session.persist(student);
		System.out.println("Inserted Successfully");
		session.getTransaction().commit();
		session.close();
		sessionFactory.close();
	}
}






package com.hibernate;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class HibernateUtil {

    private static final SessionFactory sessionFactory = buildSessionFactory();

    private static SessionFactory buildSessionFactory() {
        try {
            // Create Configuration instance
            Configuration cfg = new Configuration();

            // Database connection settings
            cfg.setProperty("hibernate.connection.driver_class", "oracle.jdbc.driver.OracleDriver");
            cfg.setProperty("hibernate.connection.url", "jdbc:oracle:thin:@//localhost:1521/orclpdb.localdomain");
            cfg.setProperty("hibernate.connection.username", "mydb");
            cfg.setProperty("hibernate.connection.password", "oracle");

            // JDBC connection pool
            cfg.setProperty("hibernate.connection.pool_size", "1");

            // SQL Dialect
            cfg.setProperty("hibernate.dialect", "org.hibernate.dialect.OracleDialect");

            // Disable second-level cache
            cfg.setProperty("hibernate.cache.provider_class", "org.hibernate.cache.NoCacheProvider");

            // Show SQL
            cfg.setProperty("hibernate.show_sql", "true");

            // hbm2ddl.auto
            cfg.setProperty("hibernate.hbm2ddl.auto", "create");

            // Add annotated class
            cfg.addAnnotatedClass(Student_Info.class);
            cfg.addAnnotatedClass(Student.class);

            // Build SessionFactory
            return cfg.buildSessionFactory();

        } catch (Throwable ex) {
            System.err.println("Initial SessionFactory creation failed." + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }

    public static SessionFactory getSessionFactory() {
        return sessionFactory;
    }

    public static void shutdown() {
        // Close caches and connection pools
        getSessionFactory().close();
    }
}










package com.hibernate;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class HibernateUtil {

    private static final SessionFactory sessionFactory = buildSessionFactory();

    private static SessionFactory buildSessionFactory() {
        try {
            // Create Configuration instance
            Configuration cfg = new Configuration();

            // Database connection settings
            cfg.setProperty("hibernate.connection.driver_class", "oracle.jdbc.driver.OracleDriver");
            cfg.setProperty("hibernate.connection.url", "jdbc:oracle:thin:@//localhost:1521/orclpdb.localdomain");
            cfg.setProperty("hibernate.connection.username", "mydb");
            cfg.setProperty("hibernate.connection.password", "oracle");

            // JDBC connection pool
            cfg.setProperty("hibernate.connection.pool_size", "1");

            // SQL Dialect
            cfg.setProperty("hibernate.dialect", "org.hibernate.dialect.OracleDialect");

            // Disable second-level cache
            cfg.setProperty("hibernate.cache.provider_class", "org.hibernate.cache.NoCacheProvider");

            // Show SQL
            cfg.setProperty("hibernate.show_sql", "true");

            // hbm2ddl.auto
            cfg.setProperty("hibernate.hbm2ddl.auto", "update");

            // Add annotated class
            cfg.addAnnotatedClass(Student_Info.class);
            cfg.addAnnotatedClass(Student.class);

            // Build SessionFactory
            return cfg.buildSessionFactory();

        } catch (Throwable ex) {
            System.err.println("Initial SessionFactory creation failed." + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }

    public static SessionFactory getSessionFactory() {
        return sessionFactory;
    }

    public static void shutdown() {
        // Close caches and connection pools
        getSessionFactory().close();
    }
}








ReadStudent

package com.hibernate;

import java.util.ArrayList;
import java.util.List;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class ReadStudent {
	public static void main(String[] args) {
		// Create session factory object
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		// getting session object from session factory
		Session session = sessionFactory.openSession();
		// getting transaction object from session object
		session.beginTransaction();
		List<Student> students = new ArrayList<Student>();
		for (Object oneObject : session.createQuery("FROM Student", Student.class).getResultList()) {
			students.add((Student) oneObject);
		}
		for (Student student : students) {
			System.out.println("Roll Number: " + student.getRollNumber() + ", Student Name: " + student.getStudentName()
					+ ", Course: " + student.getCourse());
		}
		session.getTransaction().commit();
		sessionFactory.close();
	}
}







UpdateStudent

package com.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class UpdateStudent {
	public static void main(String[] args) {
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		Session session = sessionFactory.openSession();
		session.beginTransaction();
		Student student = (Student) session.find(Student.class, 2);
		student.setStudentName("John22"); // update where id=2
		System.out.println("Updated Successfully");
		session.getTransaction().commit();
		sessionFactory.close();
		student.setStudentName("John72"); // update where id=2
	}
}






DeleteStudent


package com.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class DeleteStudent {
	public static void main(String[] args) {
		// Create session factory object
		SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
		// getting session object from session factory
		Session session = sessionFactory.openSession();
		// getting transaction object from session object
		session.beginTransaction();
		Student student = (Student) session.getReference(Student.class, 2);// delete where id=2
		session.remove(student);
		System.out.println("Deleted Successfully");
		session.getTransaction().commit();
		sessionFactory.close();
	}
}










HQLMain

package com.hibernate;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;

import java.util.List;
import java.util.Scanner;

public class MainHQL {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- Hibernate HQL CRUD Menu ---");
            System.out.println("1. Insert Student");
            System.out.println("2. Update Student Name");
            System.out.println("3. Delete Student");
            System.out.println("4. Fetch Student by Roll No");
            System.out.println("5. Fetch All Students");
            System.out.println("6. Exit");
            System.out.print("Enter choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1 -> insertStudent(sc);
                case 2 -> updateStudent(sc);
                case 3 -> deleteStudent(sc);
                case 4 -> fetchStudent(sc);
                case 5 -> fetchAllStudents();
                case 6 -> {
                    System.out.println("Exiting...");
                    HibernateUtil.getSessionFactory().close();
                    System.exit(0);
                }
                default -> System.out.println("Invalid choice!");
            }
        }
    }

    // Insert
    private static void insertStudent(Scanner sc) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = session.beginTransaction();

        System.out.print("Enter Roll No: ");
        int roll = sc.nextInt();
        sc.nextLine(); // consume newline
        System.out.print("Enter Name: ");
        String name = sc.nextLine();

        Student_Info student = new Student_Info(name, roll);
        session.persist(student);

        tx.commit();
        session.close();
        System.out.println("Student inserted successfully.");
    }

    // Update
    private static void updateStudent(Scanner sc) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = session.beginTransaction();

        System.out.print("Enter Roll No to update: ");
        int roll = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter new Name: ");
        String newName = sc.nextLine();

        Query<?> query = session.createQuery("update Student_Info set name = :name where roll_no = :roll");
        query.setParameter("name", newName);
        query.setParameter("roll", roll);
        int rows = query.executeUpdate();

        tx.commit();
        session.close();
        System.out.println(rows > 0 ? "Updated successfully." : "Student not found.");
    }

    // Delete
    private static void deleteStudent(Scanner sc) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = session.beginTransaction();

        System.out.print("Enter Roll No to delete: ");
        int roll = sc.nextInt();

        Query<?> query = session.createQuery("delete from Student_Info where roll_no = :roll");
        query.setParameter("roll", roll);
        int rows = query.executeUpdate();

        tx.commit();
        session.close();
        System.out.println(rows > 0 ? "Deleted successfully." : "Student not found.");
    }

    // Fetch one
    private static void fetchStudent(Scanner sc) {
        Session session = HibernateUtil.getSessionFactory().openSession();

        System.out.print("Enter Roll No: ");
        int roll = sc.nextInt();

        Query<Student_Info> query = session.createQuery("from Student_Info where roll_no = :roll", Student_Info.class);
        query.setParameter("roll", roll);
        Student_Info student = query.uniqueResult();

        session.close();
        if (student != null) {
            System.out.println("Roll No: " + student.getRoll_no() + ", Name: " + student.getName());
        } else {
            System.out.println("Student not found.");
        }
    }

    // Fetch all
    private static void fetchAllStudents() {
        Session session = HibernateUtil.getSessionFactory().openSession();

        Query<Student_Info> query = session.createQuery("from Student_Info", Student_Info.class);
        List<Student_Info> students = query.list();

        session.close();
        students.forEach(s ->
                System.out.println("Roll No: " + s.getRoll_no() + ", Name: " + s.getName()));
    }
}








MainSQL : CRUD in SQL

package com.hibernate;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.NativeQuery;

import java.util.List;
import java.util.Scanner;

public class MainSQL {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- Hibernate Native SQL CRUD Menu ---");
            System.out.println("1. Insert Student");
            System.out.println("2. Update Student Name");
            System.out.println("3. Delete Student");
            System.out.println("4. Fetch Student by Roll No");
            System.out.println("5. Fetch All Students");
            System.out.println("6. Exit");
            System.out.print("Enter choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1 -> insertStudent(sc);
                case 2 -> updateStudent(sc);
                case 3 -> deleteStudent(sc);
                case 4 -> fetchStudent(sc);
                case 5 -> fetchAllStudents();
                case 6 -> {
                    System.out.println("Exiting...");
                    HibernateUtil.getSessionFactory().close();
                    System.exit(0);
                }
                default -> System.out.println("Invalid choice!");
            }
        }
    }

    // Insert
    private static void insertStudent(Scanner sc) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = session.beginTransaction();

        System.out.print("Enter Roll No: ");
        int roll = sc.nextInt();
        sc.nextLine(); // consume newline
        System.out.print("Enter Name: ");
        String name = sc.nextLine();

        NativeQuery<?> query = session.createNativeQuery(
            "INSERT INTO STUDENT_INFORMATION (roll_no, name) VALUES (:roll_no, :name)");
        query.setParameter("roll_no", roll);
        query.setParameter("name", name);

        int rows = query.executeUpdate();
        tx.commit();
        session.close();

        System.out.println(rows > 0 ? "Student inserted successfully." : "Insert failed.");
    }

    // Update
    private static void updateStudent(Scanner sc) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = session.beginTransaction();

        System.out.print("Enter Roll No to update: ");
        int roll = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter new Name: ");
        String newName = sc.nextLine();

        NativeQuery<?> query = session.createNativeQuery(
            "UPDATE STUDENT_INFORMATION SET name = :name WHERE roll_no = :roll_no");
        query.setParameter("name", newName);
        query.setParameter("roll_no", roll);

        int rows = query.executeUpdate();
        tx.commit();
        session.close();

        System.out.println(rows > 0 ? "Updated successfully." : "Student not found.");
    }

    // Delete
    private static void deleteStudent(Scanner sc) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = session.beginTransaction();

        System.out.print("Enter Roll No to delete: ");
        int roll = sc.nextInt();

        NativeQuery<?> query = session.createNativeQuery(
            "DELETE FROM STUDENT_INFORMATION WHERE roll_no = :roll_no");
        query.setParameter("roll_no", roll);

        int rows = query.executeUpdate();
        tx.commit();
        session.close();

        System.out.println(rows > 0 ? "Deleted successfully." : "Student not found.");
    }

    // Fetch one
    private static void fetchStudent(Scanner sc) {
        Session session = HibernateUtil.getSessionFactory().openSession();

        System.out.print("Enter Roll No: ");
        int roll = sc.nextInt();

        NativeQuery<Student_Info> query = session.createNativeQuery(
            "SELECT * FROM STUDENT_INFORMATION WHERE roll_no = :roll_no", Student_Info.class);
        query.setParameter("roll_no", roll);

        Student_Info student = query.uniqueResult();
        session.close();

        if (student != null) {
            System.out.println("Roll No: " + student.getRoll_no() + ", Name: " + student.getName());
        } else {
            System.out.println("Student not found.");
        }
    }

    // Fetch all
    private static void fetchAllStudents() {
        Session session = HibernateUtil.getSessionFactory().openSession();

        NativeQuery<Student_Info> query = session.createNativeQuery(
            "SELECT * FROM STUDENT_INFORMATION", Student_Info.class);
        List<Student_Info> students = query.list();
        session.close();

        students.forEach(s ->
            System.out.println("Roll No: " + s.getRoll_no() + ", Name: " + s.getName())
        );
    }
}



















