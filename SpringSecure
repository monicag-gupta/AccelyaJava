Create a Spring Starter Project in Eclipse
Project details
Name: SpringSecurityLoginExample
Package: com.springsecure
Type: Maven
Packaging: war
Java version: 21
Dependencies:
Spring Web
Spring Security



Just run the application to get the password:
Clean install spring-boot:run

In the output, we get the generated password as: 
Using generated security password: 3f307aa7-984c-4fe1-b6dc-db76b9206fae
This generated password is for development use only. Your security configuration must be updated before running your application in production.
In the output:
Put username as : user
Paste this password: 3f307aa7-984c-4fe1-b6dc-db76b9206fae
Get the logged in page: type logout in url to log out.
http://localhost:8080/logout to logout








package com.springsecure.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HomeController {

    @GetMapping("/")
    public String home() {
        return “home";
    }
    @GetMapping("/home")
    public String login() {
        return "home";
    }
}








package com.sprsecure.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
          .authorizeHttpRequests(
        		  req -> req
                  .requestMatchers("/guest", "/login", "/css/**", "/js/**").permitAll() // public resources
                  .anyRequest()
                  .authenticated()
//                  .hasRole("ADMIN") 
        		  )
          .formLogin(Customizer.withDefaults());
        return http.build();
    }
    @Bean
    public InMemoryUserDetailsManager userDetailsService() {
        var user = org.springframework.security.core.userdetails.User
                .withUsername("monica")
                .password("{noop}password") // {noop} = no encoding
                .roles("USER")
                .build();

        var admin = org.springframework.security.core.userdetails.User
                .withUsername("admin")
                .password("{noop}admin123")
                .roles("ADMIN")
                .build();

        return new org.springframework.security.provisioning.InMemoryUserDetailsManager(user, admin);
    }

}





package com.sprsecure.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MainController {
	@GetMapping("/home")
	public String home(){
		return "Authenticated Page";
	}
	
	@GetMapping("/guest")
	public String guest(){
		return "Permitted Page";
	}
	
	@GetMapping("/")
	public String index(){
		return "Authenticated Page";
	}
	

}





For adding JSP pages, we need to update dependencies of pom.xml
Add the .jsp pages required in the folder:
src->main->webapp->WEB-INF->jsp folder



<!-- JSP Engine -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>







Add in webapp-> folder WEB-INF/jsphome.jsp


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>This is an authorized page</h1>
<h3><a href="/logout">Logout</a></h3>
</body>
</html>



add in application.properties:

# JSP Configuration
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

# Server port (optional)
server.port=8080

logging.level.org.springframework.web=DEBUG







Spring Starter Project
Artifact ID: CRUDJspSecure
Group ID: com.example.crudjsp
Maven
Java 21
WAR packaging
Dependencies:
Spring Web
Spring Security
Spring JPA
Oracle Driver
JSP (manually handled by adding Tomcat Jasper + JSTL)







<!-- JSP Engine -->
<dependency>
	<groupId>org.apache.tomcat.embed</groupId>
	<artifactId>tomcat-embed-jasper</artifactId>
</dependency>
<dependency>
	<groupId>javax.servlet</groupId>
	<artifactId>jstl</artifactId>
	<version>1.2</version>
</dependency>
<!-- Optional: Password encoding -->
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-crypto</artifactId>
</dependency>



spring.application.name=CRUDJspSecure

server.port=8080

# Oracle Database Connection
spring.datasource.url=jdbc:oracle:thin:@//localhost:1521/orclpdb.localdomain
spring.datasource.username=mydb
spring.datasource.password=oracle
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver

# Hibernate JPA Settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.OracleDialect

# JSP View Resolver
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

# Debugging
debug=true
logging.level.com.example.crudjsp=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE






com.example.crudjsp
 ├── CrudJspSecureApplication.java
 ├── controller/MainController.java
 ├── model/User.java
 ├── repository/UserRepository.java
 ├── security/SecurityConfig.java
 └── service/CustomUserDetailsService.java
 └── service/UsersDetailsService.java

JSP Pages (/src/main/webapp/WEB-INF/jsp/)
index.jsp
register.jsp
login.jsp
home.jsp
guest.jsp
access-denied.jsp






package com.example.crudjsp.security;

import com.example.crudjsp.service.CustomUserDetailsService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final CustomUserDetailsService userDetailsService;

    public SecurityConfig(CustomUserDetailsService userDetailsService) {
        this.userDetailsService = userDetailsService;
    }

    // Password Encoder Bean
    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

   // Main Security Filter Chain
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
        	.csrf(csrf -> csrf.disable())  // disable CSRF for simplicity with JSP demo
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/guest", "/index", "/login", "/register", "/css/**", "/js/**", "/WEB-INF/jsp/**").permitAll() // public pages
                .anyRequest().authenticated() // all others require login
            )
            .formLogin(form -> form
                .loginPage("/login")                     // your custom JSP
                .loginProcessingUrl("/perform_login")            // Spring Security handles this POST
                .defaultSuccessUrl("/home", true)        // redirect after login
                .permitAll()
            )
            .logout(logout -> logout
               // .logoutUrl("/logout")                    // link action
                .logoutSuccessUrl("/guest")              // redirect after logout
                .permitAll()
            )
            .userDetailsService(userDetailsService)
            .exceptionHandling(ex -> ex
                .accessDeniedPage("/access-denied")      // custom 403 page
            );              

        return http.build();
    }
}








package com.example.crudjsp.model;

import jakarta.persistence.*;

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false)
    private String password;

    private String role;

    public User() {}

    public User(String username, String password, String role) {
        this.username = username;
        this.password = password;
        this.role = role;
    }

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getRole() {
		return role;
	}

	public void setRole(String role) {
		this.role = role;
	}

    
}







package com.example.crudjsp.repository;

import com.example.crudjsp.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}





package com.example.crudjsp.service;

import com.example.crudjsp.model.User;
import com.example.crudjsp.repository.UserRepository;
import org.springframework.security.core.userdetails.*;
import org.springframework.stereotype.Service;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository repo;

    public CustomUserDetailsService(UserRepository repo) {
        this.repo = repo;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = repo.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        return org.springframework.security.core.userdetails.User
                .withUsername(user.getUsername())
                .password(user.getPassword())
                .roles(user.getRole())
                .build();
    }
    
    
}





package com.example.crudjsp.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.crudjsp.model.User;
import com.example.crudjsp.repository.UserRepository;

@Service
public class UsersDetailsService {
	
    private final UserRepository repo;
    @Autowired
    private PasswordEncoder passwordEncoder;

    public UsersDetailsService(UserRepository repo) {
        this.repo = repo;
    }

    public void registerUser(String username, String password) {
    	User user=new User();
    	user.setUsername(username);
    	user.setPassword(passwordEncoder.encode(password));
    	user.setRole("USER");
    	repo.save(user);
    }
    
}










package com.example.crudjsp.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.crudjsp.service.UsersDetailsService;

@Controller
public class MainController {
	@Autowired
	private UsersDetailsService userService;
	

    @GetMapping("/register")
    public String register() {
        return "register";
    }
    
    @GetMapping("/index")
    public String indexPage() {
        return "index";
    }
    
    @PostMapping("/register")
    public String registerUser(@RequestParam String username, String password) {
    	userService.registerUser(username, password);
        return "redirect:/login";
    }
    
    @GetMapping("/login")
    public String loginPage() {
        return "login";
    }

    @GetMapping("/home")
    public String homePage() {
        return "home";
    }

    @GetMapping("/guest")
    public String guestPage() {
        return "guest";
    }

    @GetMapping("/access-denied")
    public String denied() {
        return "access-denied";
    }
}







index.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h3>
		<a href="/login">Login Page</a><br />
		<a href="/regiter">Register	Page</a><br /> 
		<a href="/guest">Guest Page</a><br /> 
		<a href="/home">Home Authenticated Page</a><br />

	</h3>
</body>
</html>




login.jsp

<html>
<head><title>Login</title></head>
<body>
<h2>Login</h2>
<form method="post" action="${pageContext.request.contextPath}/perform_login">
    Username: <input type="text" name="username"/><br/>
    Password: <input type="password" name="password"/><br/>
    <button type="submit">Login</button>
</form>
<a href="/guest">Go to Guest Page</a>
<a href="/register">Go to register Page</a>

</body>
</html>





register.jsp

<html>
<head><title>Login</title></head>
<body>
<h2>Login</h2>
<form method="post" action="/register">
    Username: <input type="text" name="username"/><br/>
    Password: <input type="password" name="password"/><br/>
    <button type="submit">Login</button>
</form>
<a href="/guest">Go to Guest Page</a>
</body>
</html>





home.jsp

<html>
<head><title>Home</title></head>
<body>
<h2>Welcome Home (Authenticated)</h2>
<form method="post" action="/logout">
    <button type="submit">Logout</button>
</form>
</body>
</html>




guest.jsp

<html>
<head><title>Guest Page</title></head>
<body>
<h2>Welcome Guest!</h2>
<p>This page is public.</p>
<a href="/login">Login</a>
</body>
</html>




access-denied.jsp

<html>
<head><title>Access Denied</title></head>
<body>
<h2>Access Denied!</h2>
<a href="/guest">Back</a>
</body>
</html>





























