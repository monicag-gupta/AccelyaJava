Create a Spring Starter Project in Eclipse
Project details
Name: SpringSecurityLoginExample
Package: com.springsecure
Type: Maven
Packaging: war
Java version: 21
Dependencies:
Spring Web
Spring Security



Just run the application to get the password:
Clean install spring-boot:run

In the output, we get the generated password as: 
Using generated security password: 3f307aa7-984c-4fe1-b6dc-db76b9206fae
This generated password is for development use only. Your security configuration must be updated before running your application in production.
In the output:
Put username as : user
Paste this password: 3f307aa7-984c-4fe1-b6dc-db76b9206fae
Get the logged in page: type logout in url to log out.
http://localhost:8080/logout to logout








package com.springsecure.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HomeController {

    @GetMapping("/")
    public String home() {
        return â€œhome";
    }
    @GetMapping("/home")
    public String login() {
        return "home";
    }
}








package com.sprsecure.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
          .authorizeHttpRequests(
        		  req -> req
                  .requestMatchers("/guest", "/login", "/css/**", "/js/**").permitAll() // public resources
                  .anyRequest()
                  .authenticated()
//                  .hasRole("ADMIN") 
        		  )
          .formLogin(Customizer.withDefaults());
        return http.build();
    }
    @Bean
    public InMemoryUserDetailsManager userDetailsService() {
        var user = org.springframework.security.core.userdetails.User
                .withUsername("monica")
                .password("{noop}password") // {noop} = no encoding
                .roles("USER")
                .build();

        var admin = org.springframework.security.core.userdetails.User
                .withUsername("admin")
                .password("{noop}admin123")
                .roles("ADMIN")
                .build();

        return new org.springframework.security.provisioning.InMemoryUserDetailsManager(user, admin);
    }

}





package com.sprsecure.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MainController {
	@GetMapping("/home")
	public String home(){
		return "Authenticated Page";
	}
	
	@GetMapping("/guest")
	public String guest(){
		return "Permitted Page";
	}
	
	@GetMapping("/")
	public String index(){
		return "Authenticated Page";
	}
	

}





For adding JSP pages, we need to update dependencies of pom.xml
Add the .jsp pages required in the folder:
src->main->webapp->WEB-INF->jsp folder



<!-- JSP Engine -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>







Add in webapp-> folder WEB-INF/jsphome.jsp


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>This is an authorized page</h1>
<h3><a href="/logout">Logout</a></h3>
</body>
</html>



add in application.properties:

# JSP Configuration
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

# Server port (optional)
server.port=8080

logging.level.org.springframework.web=DEBUG







Spring Starter Project
Artifact ID: CRUDJspSecure
Group ID: com.example.crudjsp
Maven
Java 21
WAR packaging
Dependencies:
Spring Web
Spring Security
Spring JPA
Oracle Driver
JSP (manually handled by adding Tomcat Jasper + JSTL)















