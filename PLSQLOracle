set serveroutput on; 

DECLARE
    v_event VARCHAR2(15);
BEGIN
   v_event  := q'!Father's day!';
  DBMS_OUTPUT.PUT_LINE('3rd Sunday in June is :   '|| v_event );
   v_event  := q'[Mother's day]';
  DBMS_OUTPUT.PUT_LINE('2nd Sunday in May is :   '|| v_event );
END;
/










DECLARE 
 var_salary number(6);
 var_emp_id number(6) := 100;
 BEGIN 
SELECT salary  INTO var_salary  FROM employees  
WHERE employee_id = var_emp_id; 

dbms_output.put_line(var_salary);  
dbms_output.put_line('The employee ' || var_emp_id || ' has salary ' || var_salary); 
END;
 /




DECLARE
 var_num1 number;
 var_num2 number;
BEGIN
 var_num1 := 100;
 var_num2 := 200;
 DECLARE
  var_mult number;
  BEGIN
   var_mult := var_num1 * var_num2;
   dbms_output.put_line(var_mult);
  END;
   -- dbms_output.put_line(var_mult);
END;
/





DECLARE
  n_emp_id EMPLOYEES.EMPLOYEE_ID%TYPE := &emp_id1;
BEGIN
  DECLARE
    n_emp_id employees.employee_id%TYPE := &emp_id2;
    v_name employees.first_name%TYPE;
    BEGIN
     SELECT first_name INTO v_name 
        FROM employees WHERE employee_id = n_emp_id;
     DBMS_OUTPUT.PUT_LINE('First name of employee ' || n_emp_id || ' is ' || v_name);
    END;
END;
/





BEGIN <<outer>>
DECLARE
 v_father_name VARCHAR2(20):='James';
 v_date_of_birth DATE:='20-oct-2014';
BEGIN
  DECLARE
   v_child_name VARCHAR2(20):='Devins';
   v_date_of_birth DATE:='12-jun-2004';
  BEGIN
   DBMS_OUTPUT.PUT_LINE('Father''s Name: '||v_father_name);
   DBMS_OUTPUT.PUT_LINE('Date of Birth: '
                        ||outer.v_date_of_birth);
   DBMS_OUTPUT.PUT_LINE('Child''s Name: '||v_child_name);
   DBMS_OUTPUT.PUT_LINE('Date of Birth: '||v_date_of_birth);
  END;
END;  
END outer;
/





DECLARE
 a number(2) := &ano;
 BEGIN 
    IF( a < 20 )  THEN 
        dbms_output.put_line('a is less than 20 ' ); 
    END IF;
    dbms_output.put_line('value of a is : ' || a); 
END; 
/



DECLARE
 a number(2) := 10;
 BEGIN 
    a:= 10;  
    IF( a < 20 )  THEN 
        dbms_output.put_line('a is less than 20 ' ); 
    ELSE 
        dbms_output.put_line('a is not less than 20 ' ); 
    END IF;
    dbms_output.put_line('value of a is : ' || a); 
END; 
/





DECLARE 
	a number(3) := 100; 
BEGIN 
	IF ( a = 10 ) THEN 
        dbms_output.put_line('Value of a is 10' ); 
    ELSIF ( a = 20 ) THEN 
        dbms_output.put_line('Value of a is 20' ); 
    ELSIF ( a = 30 ) THEN 
        dbms_output.put_line('Value of a is 30' ); 
    ELSE 
        dbms_output.put_line('None of the values is matching'); 
    END IF;
    dbms_output.put_line('Exact value of a is: '|| a ); 
END;    
/





DECLARE 
	a number(3) := 100; 
	b number(3) := 200;
 BEGIN 
	-- check the boolean condition 
IF( a = 100 ) THEN 
	-- if condition is true then check the following 
  IF( b = 200 ) THEN 
	-- if condition is true then print the following 
	dbms_output.put_line('Value of a is 100 and b is 200' );
   END IF;
 END IF; 
dbms_output.put_line('Exact value of a is : ' || a ); dbms_output.put_line('Exact value of b is : ' || b ); 
END; /





DECLARE 
	grade char(1) := 'A'; 
BEGIN 
	CASE grade 
        when 'A' then dbms_output.put_line('Excellent'); 
        when 'B' then dbms_output.put_line('Very good'); 
        when 'C' then dbms_output.put_line('Well done'); 
        when 'D' then dbms_output.put_line('You passed'); 
        when 'F' then dbms_output.put_line('Better try again');
 	else 
        dbms_output.put_line('No such grade'); 
	END CASE; 
END; 
/



DECLARE 
	grade char(1) := '&grade'; 
BEGIN 
    select upper(grade) into grade from dual;
	CASE grade 
        when 'A' then dbms_output.put_line('Excellent'); 
        when 'B' then dbms_output.put_line('Very good'); 
        when 'C' then dbms_output.put_line('Well done'); 
        when 'D' then dbms_output.put_line('You passed'); 
        when 'F' then dbms_output.put_line('Better try again');
 	else 
        dbms_output.put_line('No such grade'); 
	END CASE; 
END; 
/





DECLARE 
	grade char(1) := 'B'; 
BEGIN 
	case 
        when grade = 'A' then 
            dbms_output.put_line('Excellent'); 
        when grade = 'B' then 
            dbms_output.put_line('Very good'); 
        when grade = 'C' then 
            dbms_output.put_line('Well done'); 
        when grade = 'D' then 
            dbms_output.put_line('You passed'); 
        when grade = 'F' then 
            dbms_output.put_line('Better try again'); 
        else 
            dbms_output.put_line('No such grade'); 
    end case;  
END;   
/



DECLARE 
	grade char(1) := '&grade'; 
BEGIN 
    select upper(grade) into grade from dual;
	case 
        when grade = 'A' then 
            dbms_output.put_line('Excellent'); 
        when grade = 'B' then 
            dbms_output.put_line('Very good'); 
        when grade = 'C' then 
            dbms_output.put_line('Well done'); 
        when grade = 'D' then 
            dbms_output.put_line('You passed'); 
        when grade = 'F' then 
            dbms_output.put_line('Better try again'); 
        else 
            dbms_output.put_line('No such grade'); 
    end case;  
END; 
/



DECLARE 
    TYPE emp_rec_type IS RECORD
        (employee_id  NUMBER(6) NOT NULL := 101,
        last_name  emp3.last_name%TYPE);

	emp_record   emp_rec_type; --empId and lastname
	emp_rec emp3%ROWTYPE; --all columns of emp3
BEGIN
	--SELECT * INTO emp_rec from emp3 WHERE employee_id=&a;
    SELECT employee_id, last_name INTO emp_record from emp3 WHERE employee_id=&a;
	DBMS_OUTPUT.PUT_LINE( emp_record.last_name||' ' || emp_record.employee_id);
END;
/





drop table customers;

create table customers as 
	select Employee_id as id, first_name||' '||last_name as name, 
	email as address, salary from employees;

select * from customers;








